{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/helpers.ts","webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/interfaces/i-point.ts","webpack://image-stylization-sines/./src/ts/lines/lines-base.ts","webpack://image-stylization-sines/./src/ts/lines/lines-polygon.ts","webpack://image-stylization-sines/./src/ts/lines/lines-sines.ts","webpack://image-stylization-sines/./src/ts/lines/lines-spiral.ts","webpack://image-stylization-sines/./src/ts/lines/lines-straight-lines.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":["buildPlotterInfos","backgroundColor","Parameters","invertColors","lineColor","lineThickness","blur","fitImageInPlotter","maxSize","aspectRatio","displayAspectRatio","width","height","sizeInPlotter","Math","floor","offSetX","offSetY","relativeToAbsolute","relativeCoords","x","y","zoomFactor","min","chooseBestSamplingFunction","trueIntensity","inputImage","coords","sqrt","sample","computeNormalRotationFunction","angle","PI","cosAngle","cos","sinAngle","sin","lengthAdjustment","normal","computeWaveFunction","waveSquareness","phase","amplitude","sharpness","sinPhase","sign","pow","abs","chooseLines","imageSizeInPlotter","linesSpacing","chosenType","linesType","ELinesType","STRAIGHT","LinesStraightLines","SPIRAL","LinesSpiral","POLYGON","LinesPolygon","LinesSines","downloadTextFile","content","filename","fileType","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","image","this","hiddenCanvas","hiddenContext","getContext","sourceImage","_size","resize","wantedSize","wantedWidth","wantedHeight","console","log","drawImage","fullPixelsArray","getImageData","data","valueArray","Uint8ClampedArray","i","length","r","g","b","normalizedCoords","pixelCoords","floorPixelCoords","fractPixelCoords","topLeft","getPixel","topRight","bottomLeft","bottomRight","top","interpolate","bottom","a","InputImage","distance","dX","dY","rotate","p","LinesBase","imageSize","_center","_suggestedImageSize","_linesSpacing","_nbSides","linesSides","diagonal","_maxSegments","ceil","walkOnLine","_lineId","step","callback","insideAngle","dSideLength","tan","startSideLength","orientationAngle","orientationInRadians","cosOrientation","sinOrientation","startPoint","iSide","sideLength","tangentAngle","endPoint","normalAngle","segmentLength","iSubstep","progression","rawPointX","rawPointY","_frequency","linesFrequency","_amplitude","linesAmplitude","max","_normal","_lines","push","computeLine","maxAbsLine","computeMaximumLinesNeeded","iAbsLine","iLine","line","lineId","computePoint","completion","wave","start","end","maxNbSteps","iStep","lineLength","tangent","center","_radiusGap","nbSemiCircles","_maxAngle","orientation","semiCircleId","radius","centerOffset","ELinesOrientation","linesOrientation","DIAGONAL","orientationInDegrees","VERTICAL","HORIZONTAL","xOutOfBounds","yOutOfBounds","computeBestImageSize","maxX","maxY","startAdjustment","endAdjustment","nbLines","plot","plotter","performance","now","displayInfos","Helpers","initialize","plotterSize","size","imageFitting","sourceImageAspectRatio","linesCount","maxFrequency","maxAmplitude","lines","suggestedImageSize","samplingFunction","normalRotation","waveFunction","point","hasStartedALine","endLine","startLine","localDarkness","localHeight","rotatedNormal","absolutePoint","addPointToLine","finalize","canvasPlotter","PlotterCanvas2D","plotOnCanvas","updateBlur","onImageLoad","Page","Canvas","showLoader","addRedrawObserver","addBlurChangeObserver","addDownloadObserver","svgPlotter","PlotterSVG","svgString","export","addFileUploadObserver","defaultImage","Image","addEventListener","src","controlId","redrawObservers","triggerRedraw","observer","udpateLinesControlsVisibility","Tabs","getValues","Controls","setVisibility","SINES","addObserver","Range","addLazyObserver","Checkbox","Observers","canvasResize","FileControl","addUploadObserver","filesList","FileReader","onload","result","readAsDataURL","getValue","isChecked","ANGLE_THRESHOLD","_hasStartedALine","startLineInternal","lastDrawnPoint","potentialNextPoint","newPoint","addFirstPointToLineInternal","PlotterBase","computeAngle","addPointToLineInternal","endLineInternal","p1","p2","p3","angle1","atan2","angle2","diffAngle","canvas","getCanvas","context","alpha","cssPixel","devicePixelRatio","infos","resizeCanvas","fillStyle","strokeStyle","lineWidth","lineJoin","lineCap","roundLinecap","fillRect","value","filter","beginPath","rawX","rawY","moveTo","lineTo","stroke","closePath","actualWidth","clientWidth","actualHeight","clientHeight","hasBlur","stringParts","linecap","Date","join","toFixed","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { InputImage } from \"./input-image\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\nimport { ISize } from \"./interfaces/i-size\";\r\nimport { Parameters, ELinesType } from \"./parameters\";\r\nimport { LinesBase } from \"./lines/lines-base\";\r\nimport { LinesStraightLines } from \"./lines/lines-straight-lines\";\r\nimport { LinesSines } from \"./lines/lines-sines\";\r\nimport { LinesSpiral } from \"./lines/lines-spiral\";\r\nimport { IPlotterInfo } from \"./plotter/plotter-base\";\r\nimport { LinesPolygon } from \"./lines/lines-polygon\";\r\n\r\nfunction buildPlotterInfos(): IPlotterInfo {\r\n    return {\r\n        backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n        lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n        lineThickness: Parameters.lineThickness,\r\n        blur: Parameters.blur,\r\n    };\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize,\r\n    relativeToAbsolute: (relativeCoords: IPoint) => IPoint;\r\n    zoomFactor: number,\r\n};\r\n\r\nfunction fitImageInPlotter(maxSize: ISize, aspectRatio: number): IImageFitting {\r\n    const displayAspectRatio = maxSize.width / maxSize.height;\r\n\r\n    const sizeInPlotter: ISize = {\r\n        width: maxSize.width,\r\n        height: maxSize.height,\r\n    };\r\n    if (aspectRatio > displayAspectRatio) {\r\n        sizeInPlotter.height = Math.floor(sizeInPlotter.height * displayAspectRatio / aspectRatio);\r\n    } else if (aspectRatio < displayAspectRatio) {\r\n        sizeInPlotter.width = Math.floor(sizeInPlotter.width * aspectRatio / displayAspectRatio);\r\n    }\r\n\r\n    const offSetX = 0.5 * (maxSize.width - sizeInPlotter.width);\r\n    const offSetY = 0.5 * (maxSize.height - sizeInPlotter.height);\r\n    const relativeToAbsolute = (relativeCoords: IPoint): IPoint => {\r\n        return {\r\n            x: relativeCoords.x + offSetX,\r\n            y: relativeCoords.y + offSetY,\r\n        };\r\n    };\r\n\r\n    const minSide = Math.min(sizeInPlotter.width, sizeInPlotter.height);\r\n    const baseMinSide = Math.min(aspectRatio, 1 / aspectRatio);\r\n\r\n    return {\r\n        sizeInPlotter,\r\n        relativeToAbsolute,\r\n        zoomFactor: minSide / baseMinSide,\r\n    };\r\n}\r\n\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\nfunction chooseBestSamplingFunction(): SamplingFunction {\r\n    if (Parameters.trueIntensity) {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(inputImage.sample(coords));\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(1.001 - inputImage.sample(coords));\r\n        }\r\n    } else {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => inputImage.sample(coords);\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => 1 - inputImage.sample(coords);\r\n        }\r\n    }\r\n}\r\n\r\ntype NormalRotationFunction = (normal: IPoint) => IPoint;\r\nfunction computeNormalRotationFunction(): NormalRotationFunction {\r\n    const angle = Parameters.angle * 2 * Math.PI;\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n    const lengthAdjustment = 1 / cosAngle; // to maintain the waves height no matter the angle\r\n    return (normal: IPoint): IPoint => {\r\n        return {\r\n            x: (cosAngle * normal.x - sinAngle * normal.y) * lengthAdjustment,\r\n            y: (sinAngle * normal.x + cosAngle * normal.y) * lengthAdjustment,\r\n        };\r\n    };\r\n}\r\n\r\ntype WaveFunction = (phase: number, amplitude: number) => number;\r\nfunction computeWaveFunction(): WaveFunction {\r\n    if (Parameters.waveSquareness < 0.005) {\r\n        return (phase: number, amplitude: number) => amplitude * Math.sin(phase);\r\n    }\r\n\r\n    const sharpness = 1 - 0.99 * Parameters.waveSquareness;\r\n    return (phase: number, amplitude: number) => {\r\n        const sinPhase = Math.sin(phase);\r\n        return amplitude * Math.sign(sinPhase) * Math.pow(Math.abs(sinPhase), sharpness);\r\n    };\r\n}\r\n\r\nfunction chooseLines(imageSizeInPlotter: ISize, linesSpacing: number): LinesBase {\r\n    const chosenType = Parameters.linesType;\r\n    if (chosenType === ELinesType.STRAIGHT) {\r\n        return new LinesStraightLines(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.SPIRAL) {\r\n        return new LinesSpiral(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.POLYGON) {\r\n        return new LinesPolygon(imageSizeInPlotter, linesSpacing);\r\n    } else {\r\n        return new LinesSines(imageSizeInPlotter, linesSpacing);\r\n    }\r\n}\r\n\r\nfunction downloadTextFile(content: string, filename: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, filename);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = filename;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport {\r\n    buildPlotterInfos,\r\n    chooseBestSamplingFunction,\r\n    chooseLines,\r\n    computeNormalRotationFunction,\r\n    computeWaveFunction,\r\n    downloadTextFile,\r\n    fitImageInPlotter,\r\n};\r\n","import { ISize } from \"./interfaces/i-size\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nclass InputImage {\r\n    private _size: ISize;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.resize({ width: image.width, height: image.height });\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._size.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._size.height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(wantedSize: ISize): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, wantedSize.width);\r\n        const wantedHeight = Math.min(this.sourceImage.height, wantedSize.height);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            console.log(`Resize image from ${this.width}x${this.height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._size.width = wantedWidth;\r\n            this._size.height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1]. Performs linear interpolation. */\r\n    public sample(normalizedCoords: IPoint): number {\r\n        const pixelCoords: IPoint = {\r\n            x: normalizedCoords.x * (this._size.width - 1),\r\n            y: normalizedCoords.y * (this._size.height - 1),\r\n        }\r\n\r\n        const floorPixelCoords: IPoint = {\r\n            x: Math.floor(pixelCoords.x),\r\n            y: Math.floor(pixelCoords.y),\r\n        };\r\n        const fractPixelCoords: IPoint = {\r\n            x: pixelCoords.x - floorPixelCoords.x,\r\n            y: pixelCoords.y - floorPixelCoords.y,\r\n        };\r\n\r\n        const topLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y);\r\n        const topRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y);\r\n        const bottomLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y + 1);\r\n        const bottomRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y + 1);\r\n\r\n        const top = this.interpolate(topLeft, topRight, fractPixelCoords.x);\r\n        const bottom = this.interpolate(bottomLeft, bottomRight, fractPixelCoords.x);\r\n\r\n        const interpolated = this.interpolate(top, bottom, fractPixelCoords.y);\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    private interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 - x) + b * x;\r\n    }\r\n\r\n    /** Returns a value in [0, 255]. No interpolation.\r\n     * @param x in pixels, must be an integer\r\n     * @param y in pixels, must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction distance(a: IPoint, b: IPoint): number {\r\n    const dX = a.x - b.x;\r\n    const dY = a.y - b.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction rotate(p: IPoint, angle: number): IPoint {\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n\r\n    return {\r\n        x: p.x * cosAngle - p.y * sinAngle,\r\n        y: p.x * sinAngle + p.y * cosAngle,\r\n    };\r\n}\r\n\r\nexport { IPoint, distance, rotate }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ntype LineWalker = (point: IPoint, normal: IPoint) => unknown;\r\n\r\nabstract class LinesBase {\r\n    /** Returns the suggested image size for optimum quality */\r\n    public abstract get suggestedImageSize(): ISize;\r\n    public abstract get nbLines(): number;\r\n\r\n    /**\r\n     * @param lineId integer\r\n     * @param step in canvas pixels\r\n     */\r\n    public abstract walkOnLine(lineId: number, step: number, callback: LineWalker): void;\r\n}\r\n\r\nexport { LineWalker, LinesBase }\r\n","import { distance, IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesPolygon extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _linesSpacing: number;\r\n    private readonly _maxSegments: number;\r\n    private readonly _nbSides: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._linesSpacing = linesSpacing;\r\n        this._nbSides = Parameters.linesSides;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        this._maxSegments = Math.ceil(this._nbSides * diagonal / linesSpacing);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const insideAngle = Math.PI * (this._nbSides - 2) / this._nbSides; // inside angle of a regular polygon\r\n        const dSideLength = 2 * this._linesSpacing / Math.tan(insideAngle / 2) / this._nbSides;\r\n        const startSideLength = 0.5 * dSideLength;\r\n\r\n        const orientationAngle = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientationAngle);\r\n        const sinOrientation = Math.sin(orientationAngle);\r\n\r\n        let startPoint: IPoint = {\r\n            x: this._center.x,\r\n            y: this._center.y,\r\n        };\r\n        for (let iSide = 0; iSide < this._maxSegments; iSide++) {\r\n            const sideLength = startSideLength + iSide * dSideLength;\r\n            const tangentAngle = Math.PI + (iSide % this._nbSides) * 2 * Math.PI / this._nbSides;\r\n\r\n            const endPoint: IPoint = {\r\n                x: startPoint.x + sideLength * Math.cos(tangentAngle),\r\n                y: startPoint.y + sideLength * Math.sin(tangentAngle),\r\n            };\r\n\r\n            const normalAngle = tangentAngle + orientationAngle + Math.PI / 2;\r\n            const normal: IPoint = { x: Math.cos(normalAngle), y: Math.sin(normalAngle) };\r\n\r\n            const segmentLength = distance(startPoint, endPoint);\r\n            for (let iSubstep = 0; iSubstep * step < segmentLength; iSubstep++) {\r\n                const currentLength = iSubstep * step;\r\n                const progression = currentLength / segmentLength;\r\n\r\n                const rawPointX = startPoint.x * (1 - progression) + endPoint.x * progression - this._center.x;\r\n                const rawPointY = startPoint.y * (1 - progression) + endPoint.y * progression - this._center.y;\r\n\r\n                const point: IPoint = {\r\n                    x: cosOrientation * rawPointX - sinOrientation * rawPointY + this._center.x,\r\n                    y: sinOrientation * rawPointX + cosOrientation * rawPointY + this._center.y,\r\n                };\r\n                callback(point, normal);\r\n            }\r\n\r\n            startPoint = endPoint;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesPolygon };\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nclass LinesSines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n    private readonly _frequency: number;\r\n    private readonly _amplitude: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._frequency = Parameters.linesFrequency;\r\n        this._amplitude = Parameters.linesAmplitude * 0.2 * Math.max(imageSize.width, imageSize.height);\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesSines.computeLine(0, linesSpacing, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = this.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesSines.computeLine(iLine, linesSpacing, this._normal, imageSize);\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = { width: imageSize.width, height: imageSize.height };\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        const computePoint = (completion: number): IPoint => {\r\n            const wave = this._amplitude * Math.sin(2 * Math.PI * completion * this._frequency);\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion + wave * this._normal.x,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion + wave * this._normal.y,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, normal: IPoint, imageSize: ISize): ILine {\r\n        const lineLength = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const center: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: center.x - 0.5 * lineLength * tangent.x,\r\n            y: center.y - 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        const end: IPoint = {\r\n            x: center.x + 0.5 * lineLength * tangent.x,\r\n            y: center.y + 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: lineLength, // this is not mathematically accurate\r\n        };\r\n    }\r\n\r\n    private computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const width = imageSize.width + 2 * this._amplitude;\r\n        const height = imageSize.height + 2 * this._amplitude;\r\n\r\n        const diagonal = Math.sqrt(width * width + height * height);\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesSines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesSpiral extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _radiusGap: number;\r\n    private readonly _maxAngle: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._radiusGap = 0.5 * linesSpacing;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const nbSemiCircles = Math.ceil(diagonal / linesSpacing);\r\n        this._maxAngle = nbSemiCircles * Math.PI;\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const orientation = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientation);\r\n        const sinOrientation = Math.sin(orientation);\r\n\r\n        let angle = 0;\r\n        while (angle < this._maxAngle) {\r\n            const cosAngle = Math.cos(angle);\r\n            const sinAngle = Math.sin(angle);\r\n\r\n            const semiCircleId = Math.ceil((angle - orientation) / Math.PI);\r\n            const radius = (semiCircleId + 0.125) * this._radiusGap;\r\n            const centerOffset = this._radiusGap * (0.5 - (semiCircleId % 2));\r\n\r\n            const point: IPoint = {\r\n                x: this._center.x + centerOffset * cosOrientation + radius * cosAngle,\r\n                y: this._center.y + centerOffset * sinOrientation + radius * sinAngle,\r\n            };\r\n            const normal: IPoint = {\r\n                x: -cosAngle,\r\n                y: -sinAngle,\r\n            };\r\n\r\n            callback(point, normal);\r\n\r\n            angle += step / radius;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesSpiral }\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint, distance } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nenum ELinesOrientation {\r\n    HORIZONTAL,\r\n    VERTICAL,\r\n    DIAGONAL,\r\n}\r\n\r\nclass LinesStraightLines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        let linesOrientation = ELinesOrientation.DIAGONAL;\r\n        if (Parameters.orientationInDegrees % 180 === 90) {\r\n            linesOrientation = ELinesOrientation.VERTICAL;\r\n        } else if (Parameters.orientationInDegrees % 180 === 0) {\r\n            linesOrientation = ELinesOrientation.HORIZONTAL;\r\n        }\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesStraightLines.computeLine(0, linesSpacing, linesOrientation, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = LinesStraightLines.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesStraightLines.computeLine(iLine, linesSpacing, linesOrientation, this._normal, imageSize);\r\n\r\n                const ROUNDING_ERROR = 0.1;\r\n\r\n                const xOutOfBounds = line.start.x < -ROUNDING_ERROR || line.start.x > imageSize.width - 1 + ROUNDING_ERROR;\r\n                const yOutOfBounds = line.start.y < -ROUNDING_ERROR || line.start.y > imageSize.height - 1 + ROUNDING_ERROR;\r\n\r\n                if (xOutOfBounds || yOutOfBounds) {\r\n                    break;\r\n                }\r\n\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = LinesStraightLines.computeBestImageSize(imageSize, this._lines.length, linesOrientation);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        function computePoint(completion: number): IPoint {\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, linesOrientation: ELinesOrientation, normal: IPoint, imageSize: ISize): ILine {\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n        const end: IPoint = { x: start.x, y: start.y };\r\n\r\n        const maxX = imageSize.width - 1;\r\n        const maxY = imageSize.height - 1;\r\n\r\n        if (linesOrientation === ELinesOrientation.HORIZONTAL) {\r\n            start.x = 0;\r\n            end.x = maxX;\r\n        } else if (linesOrientation === ELinesOrientation.VERTICAL) {\r\n            start.y = 0;\r\n            end.y = maxY;\r\n        } else {\r\n            const startAdjustment = Math.min(start.x / tangent.x, start.y / tangent.y);\r\n            start.x -= startAdjustment * tangent.x;\r\n            start.y -= startAdjustment * tangent.y;\r\n\r\n            const endAdjustment = Math.min((maxX - end.x) / tangent.x, (maxY - end.y) / tangent.y);\r\n            end.x += endAdjustment * tangent.x;\r\n            end.y += endAdjustment * tangent.y;\r\n        }\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: distance(start, end),\r\n        };\r\n    }\r\n\r\n    private static computeBestImageSize(imageSize: ISize, nbLines: number, orientation: ELinesOrientation): ISize {\r\n        if (orientation === ELinesOrientation.HORIZONTAL) {\r\n            return {\r\n                width: imageSize.width,\r\n                height: nbLines,\r\n            };\r\n        } else if (orientation === ELinesOrientation.VERTICAL) {\r\n            return {\r\n                width: nbLines,\r\n                height: imageSize.height,\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n    }\r\n\r\n    private static computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height)\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesStraightLines }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\n\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(image: InputImage, plotter: PlotterBase): void {\r\n    const start = performance.now();\r\n\r\n    if (image == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    const displayInfos = Helpers.buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    const plotterSize = plotter.size;\r\n    const imageFitting = Helpers.fitImageInPlotter(plotterSize, image.sourceImageAspectRatio);\r\n\r\n    const baseLineSpacing = 1 / Parameters.linesCount;\r\n    const linesSpacing = baseLineSpacing * imageFitting.zoomFactor;\r\n\r\n    const baseMaxFrequency = 500 * Parameters.maxFrequency;\r\n    const maxFrequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n\r\n    const maxAmplitude = 0.5 * (linesSpacing - displayInfos.lineThickness) * Parameters.maxAmplitude;\r\n\r\n    const lines = Helpers.chooseLines(imageFitting.sizeInPlotter, linesSpacing);\r\n\r\n    image.resize(lines.suggestedImageSize);\r\n\r\n    const samplingFunction = Helpers.chooseBestSamplingFunction();\r\n    const normalRotation = Helpers.computeNormalRotationFunction();\r\n    const waveFunction = Helpers.computeWaveFunction();\r\n\r\n    const samplesPerPixel = Math.max(1, 2 * maxFrequency);\r\n    const step = 1 / samplesPerPixel;\r\n    for (let iLine = 0; iLine < lines.nbLines; iLine++) {\r\n        let phase = 0;\r\n        lines.walkOnLine(iLine, step, (point: IPoint, normal: IPoint) => {\r\n            const normalizedCoords: IPoint = {\r\n                x: point.x / (imageFitting.sizeInPlotter.width - 1),\r\n                y: point.y / (imageFitting.sizeInPlotter.height - 1),\r\n            };\r\n\r\n            const outOfImage = normalizedCoords.x < 0 || normalizedCoords.x > 1 || normalizedCoords.y < 0 || normalizedCoords.y > 1;\r\n            if (outOfImage) {\r\n                if (plotter.hasStartedALine) {\r\n                    plotter.endLine();\r\n                }\r\n                return;\r\n            } else if (!plotter.hasStartedALine) {\r\n                plotter.startLine();\r\n            }\r\n\r\n            const localDarkness = samplingFunction(image, normalizedCoords);\r\n\r\n            const localAmplitude = localDarkness * maxAmplitude;\r\n            const localHeight = waveFunction(phase, localAmplitude);\r\n\r\n            const rotatedNormal = normalRotation(normal);\r\n            const dX = localHeight * rotatedNormal.x;\r\n            const dY = localHeight * rotatedNormal.y;\r\n\r\n            const absolutePoint = imageFitting.relativeToAbsolute(point);\r\n            plotter.addPointToLine(absolutePoint.x + dX, absolutePoint.y + dY);\r\n\r\n            const localFrequency = localDarkness * maxFrequency;\r\n            phase += localFrequency * step;\r\n        });\r\n\r\n        if (plotter.hasStartedALine) {\r\n            plotter.endLine();\r\n        }\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${performance.now() - start} ms.`);\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\nconst canvasPlotter = new PlotterCanvas2D();\r\n\r\nfunction plotOnCanvas(): void {\r\n    plot(inputImage, canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nParameters.addDownloadObserver(() => {\r\n    const svgPlotter = new PlotterSVG();\r\n    plot(inputImage, svgPlotter);\r\n    const svgString = svgPlotter.export();\r\n    const filename = \"image-as-sines.svg\";\r\n    Helpers.downloadTextFile(svgString, filename);\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    LINES_TYPE: \"lines-type-tabs-id\",\r\n    LINES_COUNT: \"lines-count-range-id\",\r\n    ORIENTATION: \"orientation-range-id\",\r\n    LINES_SIDES: \"lines-sides-range-id\",\r\n    LINES_AMPLITUDE: \"lines-amplitude-range-id\",\r\n    LINES_FREQUENCY: \"lines-frequency-range-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    WAVE_SQUARENESS: \"wave-squareness-range-id\",\r\n    LINE_THICKNESS: \"line-thickness-range-id\",\r\n    ROUND_LINECAP: \"round-linecap-checkbox-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    TRUE_INTENSITY: \"true-intensity-checkbox-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\nenum ELinesType {\r\n    STRAIGHT = \"0\",\r\n    SPIRAL = \"1\",\r\n    POLYGON = \"2\",\r\n    SINES = \"3\",\r\n}\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_COUNT, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ORIENTATION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_SIDES, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.WAVE_SQUARENESS, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_THICKNESS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ROUND_LINECAP, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.TRUE_INTENSITY, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nfunction udpateLinesControlsVisibility(): void {\r\n    const type = Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    Page.Controls.setVisibility(controlId.LINES_SIDES, type === ELinesType.POLYGON);\r\n    Page.Controls.setVisibility(controlId.LINES_AMPLITUDE, type === ELinesType.SINES);\r\n    Page.Controls.setVisibility(controlId.LINES_FREQUENCY, type === ELinesType.SINES);\r\n}\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, udpateLinesControlsVisibility);\r\nudpateLinesControlsVisibility();\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get linesType(): ELinesType {\r\n        return Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    }\r\n\r\n    public static get linesCount(): number {\r\n        return Page.Range.getValue(controlId.LINES_COUNT);\r\n    }\r\n\r\n    public static get orientationInDegrees(): number {\r\n        return Page.Range.getValue(controlId.ORIENTATION);\r\n    }\r\n    public static get orientationInRadians(): number {\r\n        return this.orientationInDegrees / 180 * Math.PI;\r\n    }\r\n\r\n    public static get linesSides(): number {\r\n        return Page.Range.getValue(controlId.LINES_SIDES);\r\n    }\r\n\r\n    public static get linesAmplitude(): number {\r\n        return Page.Range.getValue(controlId.LINES_AMPLITUDE);\r\n    }\r\n\r\n    public static get linesFrequency(): number {\r\n        return Page.Range.getValue(controlId.LINES_FREQUENCY);\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get waveSquareness(): number {\r\n        return Page.Range.getValue(controlId.WAVE_SQUARENESS);\r\n    }\r\n\r\n    public static get lineThickness(): number {\r\n        return Page.Range.getValue(controlId.LINE_THICKNESS);\r\n    }\r\n\r\n    public static get roundLinecap(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ROUND_LINECAP);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get trueIntensity(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TRUE_INTENSITY);\r\n    }\r\n\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, ELinesType }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineThickness: number;\r\n    blur: number;\r\n}\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public get hasStartedALine(): boolean {\r\n        return this._hasStartedALine;\r\n    }\r\n\r\n    public startLine(): void {\r\n        this._hasStartedALine = true;\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n        this._hasStartedALine = false;\r\n    }\r\n\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n    private _hasStartedALine: boolean = false;\r\n}\r\n\r\nexport { PlotterBase, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { Parameters } from \"../parameters\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.resizeCanvas();\r\n\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineThickness * this.cssPixel;\r\n        this.context.lineJoin = \"round\";\r\n        this.context.lineCap = Parameters.roundLinecap ? \"round\" : \"butt\";\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { Parameters } from \"../parameters\";\r\nimport { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${infos.backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${WIDTH}\" height=\"${HEIGHT}\"/>\\n`);\r\n        const linecap = Parameters.roundLinecap ? ` stroke-linecap=\"round\"` : ``;\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineThickness}\" stroke-linejoin=\"round\"${linecap}>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}