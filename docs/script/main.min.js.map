{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/helpers.ts","webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/interfaces/i-point.ts","webpack://image-stylization-sines/./src/ts/lines/lines-base.ts","webpack://image-stylization-sines/./src/ts/lines/lines-polygon.ts","webpack://image-stylization-sines/./src/ts/lines/lines-sines.ts","webpack://image-stylization-sines/./src/ts/lines/lines-spiral.ts","webpack://image-stylization-sines/./src/ts/lines/lines-straight-lines.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":["buildPlotterInfos","backgroundColor","Parameters","invertColors","lineColor","lineThickness","blur","fitImageInPlotter","maxSize","aspectRatio","displayAspectRatio","width","height","sizeInPlotter","Math","floor","offSetX","offSetY","relativeToAbsolute","relativeCoords","x","y","zoomFactor","min","chooseBestSamplingFunction","trueIntensity","inputImage","coords","sqrt","sample","computeNormalRotationFunction","angle","PI","cosAngle","cos","sinAngle","sin","lengthAdjustment","normal","computeWaveFunction","waveSquareness","phase","amplitude","sharpness","sinPhase","sign","pow","abs","chooseLines","imageSizeInPlotter","linesSpacing","chosenType","linesType","ELinesType","STRAIGHT","LinesStraightLines","SPIRAL","LinesSpiral","POLYGON","LinesPolygon","LinesSines","image","this","hiddenCanvas","document","createElement","hiddenContext","getContext","sourceImage","_size","resize","wantedSize","wantedWidth","wantedHeight","console","log","drawImage","fullPixelsArray","getImageData","data","valueArray","Uint8ClampedArray","i","length","r","g","b","normalizedCoords","pixelCoords","floorPixelCoords","fractPixelCoords","topLeft","getPixel","topRight","bottomLeft","bottomRight","top","interpolate","bottom","a","InputImage","distance","dX","dY","rotate","p","LinesBase","imageSize","_center","_suggestedImageSize","_linesSpacing","_nbSides","linesSides","diagonal","_maxSegments","ceil","walkOnLine","_lineId","step","callback","insideAngle","dSideLength","tan","startSideLength","orientationAngle","orientationInRadians","cosOrientation","sinOrientation","startPoint","iSide","sideLength","tangentAngle","endPoint","normalAngle","segmentLength","iSubstep","progression","rawPointX","rawPointY","_frequency","linesFrequency","_amplitude","linesAmplitude","max","_normal","_lines","push","computeLine","maxAbsLine","computeMaximumLinesNeeded","iAbsLine","iLine","line","lineId","computePoint","completion","wave","start","end","maxNbSteps","iStep","lineLength","tangent","center","_radiusGap","nbSemiCircles","_maxAngle","orientation","semiCircleId","radius","centerOffset","ELinesOrientation","linesOrientation","DIAGONAL","orientationInDegrees","VERTICAL","HORIZONTAL","xOutOfBounds","yOutOfBounds","computeBestImageSize","maxX","maxY","startAdjustment","endAdjustment","nbLines","plot","plotter","Date","now","displayInfos","Helpers","initialize","plotterSize","size","imageFitting","sourceImageAspectRatio","linesCount","maxFrequency","maxAmplitude","lines","suggestedImageSize","samplingFunction","normalRotation","waveFunction","point","hasStartedALine","endLine","startLine","localDarkness","localHeight","rotatedNormal","absolutePoint","addPointToLine","finalize","canvasPlotter","PlotterCanvas2D","plotOnCanvas","updateBlur","onImageLoad","Page","Canvas","showLoader","addRedrawObserver","addBlurChangeObserver","addDownloadObserver","svgPlotter","PlotterSVG","fileName","fileType","svgString","export","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","addFileUploadObserver","defaultImage","Image","addEventListener","src","controlId","redrawObservers","triggerRedraw","observer","udpateLinesControlsVisibility","Tabs","getValues","Controls","setVisibility","SINES","addObserver","Range","addLazyObserver","Checkbox","Observers","canvasResize","FileControl","addUploadObserver","filesList","FileReader","onload","result","readAsDataURL","getValue","isChecked","ANGLE_THRESHOLD","_hasStartedALine","startLineInternal","lastDrawnPoint","potentialNextPoint","newPoint","addFirstPointToLineInternal","PlotterBase","computeAngle","addPointToLineInternal","endLineInternal","p1","p2","p3","angle1","atan2","angle2","diffAngle","canvas","getCanvas","context","alpha","cssPixel","devicePixelRatio","infos","resizeCanvas","fillStyle","strokeStyle","lineWidth","lineJoin","lineCap","roundLinecap","fillRect","value","filter","beginPath","rawX","rawY","moveTo","lineTo","stroke","closePath","actualWidth","clientWidth","actualHeight","clientHeight","hasBlur","stringParts","linecap","join","toFixed","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { InputImage } from \"./input-image\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\nimport { ISize } from \"./interfaces/i-size\";\r\nimport { Parameters, ELinesType } from \"./parameters\";\r\nimport { LinesBase } from \"./lines/lines-base\";\r\nimport { LinesStraightLines } from \"./lines/lines-straight-lines\";\r\nimport { LinesSines } from \"./lines/lines-sines\";\r\nimport { LinesSpiral } from \"./lines/lines-spiral\";\r\nimport { IPlotterInfo } from \"./plotter/plotter-base\";\r\nimport { LinesPolygon } from \"./lines/lines-polygon\";\r\n\r\nfunction buildPlotterInfos(): IPlotterInfo {\r\n    return {\r\n        backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n        lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n        lineThickness: Parameters.lineThickness,\r\n        blur: Parameters.blur,\r\n    };\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize,\r\n    relativeToAbsolute: (relativeCoords: IPoint) => IPoint;\r\n    zoomFactor: number,\r\n};\r\n\r\nfunction fitImageInPlotter(maxSize: ISize, aspectRatio: number): IImageFitting {\r\n    const displayAspectRatio = maxSize.width / maxSize.height;\r\n\r\n    const sizeInPlotter: ISize = {\r\n        width: maxSize.width,\r\n        height: maxSize.height,\r\n    };\r\n    if (aspectRatio > displayAspectRatio) {\r\n        sizeInPlotter.height = Math.floor(sizeInPlotter.height * displayAspectRatio / aspectRatio);\r\n    } else if (aspectRatio < displayAspectRatio) {\r\n        sizeInPlotter.width = Math.floor(sizeInPlotter.width * aspectRatio / displayAspectRatio);\r\n    }\r\n\r\n    const offSetX = 0.5 * (maxSize.width - sizeInPlotter.width);\r\n    const offSetY = 0.5 * (maxSize.height - sizeInPlotter.height);\r\n    const relativeToAbsolute = (relativeCoords: IPoint): IPoint => {\r\n        return {\r\n            x: relativeCoords.x + offSetX,\r\n            y: relativeCoords.y + offSetY,\r\n        };\r\n    };\r\n\r\n    const minSide = Math.min(sizeInPlotter.width, sizeInPlotter.height);\r\n    const baseMinSide = Math.min(aspectRatio, 1 / aspectRatio);\r\n\r\n    return {\r\n        sizeInPlotter,\r\n        relativeToAbsolute,\r\n        zoomFactor: minSide / baseMinSide,\r\n    };\r\n}\r\n\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\nfunction chooseBestSamplingFunction(): SamplingFunction {\r\n    if (Parameters.trueIntensity) {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(inputImage.sample(coords));\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(1.001 - inputImage.sample(coords));\r\n        }\r\n    } else {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => inputImage.sample(coords);\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => 1 - inputImage.sample(coords);\r\n        }\r\n    }\r\n}\r\n\r\ntype NormalRotationFunction = (normal: IPoint) => IPoint;\r\nfunction computeNormalRotationFunction(): NormalRotationFunction {\r\n    const angle = Parameters.angle * 2 * Math.PI;\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n    const lengthAdjustment = 1 / cosAngle; // to maintain the waves height no matter the angle\r\n    return (normal: IPoint): IPoint => {\r\n        return {\r\n            x: (cosAngle * normal.x - sinAngle * normal.y) * lengthAdjustment,\r\n            y: (sinAngle * normal.x + cosAngle * normal.y) * lengthAdjustment,\r\n        };\r\n    };\r\n}\r\n\r\ntype WaveFunction = (phase: number, amplitude: number) => number;\r\nfunction computeWaveFunction(): WaveFunction {\r\n    if (Parameters.waveSquareness < 0.005) {\r\n        return (phase: number, amplitude: number) => amplitude * Math.sin(phase);\r\n    }\r\n\r\n    const sharpness = 1 - 0.99 * Parameters.waveSquareness;\r\n    return (phase: number, amplitude: number) => {\r\n        const sinPhase = Math.sin(phase);\r\n        return amplitude * Math.sign(sinPhase) * Math.pow(Math.abs(sinPhase), sharpness);\r\n    };\r\n}\r\n\r\nfunction chooseLines(imageSizeInPlotter: ISize, linesSpacing: number): LinesBase {\r\n    const chosenType = Parameters.linesType;\r\n    if (chosenType === ELinesType.STRAIGHT) {\r\n        return new LinesStraightLines(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.SPIRAL) {\r\n        return new LinesSpiral(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.POLYGON) {\r\n        return new LinesPolygon(imageSizeInPlotter, linesSpacing);\r\n    } else {\r\n        return new LinesSines(imageSizeInPlotter, linesSpacing);\r\n    }\r\n}\r\n\r\nexport {\r\n    buildPlotterInfos,\r\n    chooseBestSamplingFunction,\r\n    chooseLines,\r\n    computeNormalRotationFunction,\r\n    computeWaveFunction,\r\n    fitImageInPlotter,\r\n};\r\n","import { ISize } from \"./interfaces/i-size\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nclass InputImage {\r\n    private _size: ISize;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.resize({ width: image.width, height: image.height });\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._size.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._size.height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(wantedSize: ISize): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, wantedSize.width);\r\n        const wantedHeight = Math.min(this.sourceImage.height, wantedSize.height);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            console.log(`Resize image from ${this.width}x${this.height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._size.width = wantedWidth;\r\n            this._size.height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1]. Performs linear interpolation. */\r\n    public sample(normalizedCoords: IPoint): number {\r\n        const pixelCoords: IPoint = {\r\n            x: normalizedCoords.x * (this._size.width - 1),\r\n            y: normalizedCoords.y * (this._size.height - 1),\r\n        }\r\n\r\n        const floorPixelCoords: IPoint = {\r\n            x: Math.floor(pixelCoords.x),\r\n            y: Math.floor(pixelCoords.y),\r\n        };\r\n        const fractPixelCoords: IPoint = {\r\n            x: pixelCoords.x - floorPixelCoords.x,\r\n            y: pixelCoords.y - floorPixelCoords.y,\r\n        };\r\n\r\n        const topLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y);\r\n        const topRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y);\r\n        const bottomLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y + 1);\r\n        const bottomRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y + 1);\r\n\r\n        const top = this.interpolate(topLeft, topRight, fractPixelCoords.x);\r\n        const bottom = this.interpolate(bottomLeft, bottomRight, fractPixelCoords.x);\r\n\r\n        const interpolated = this.interpolate(top, bottom, fractPixelCoords.y);\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    private interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 - x) + b * x;\r\n    }\r\n\r\n    /** Returns a value in [0, 255]. No interpolation.\r\n     * @param x in pixels, must be an integer\r\n     * @param y in pixels, must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction distance(a: IPoint, b: IPoint): number {\r\n    const dX = a.x - b.x;\r\n    const dY = a.y - b.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction rotate(p: IPoint, angle: number): IPoint {\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n\r\n    return {\r\n        x: p.x * cosAngle - p.y * sinAngle,\r\n        y: p.x * sinAngle + p.y * cosAngle,\r\n    };\r\n}\r\n\r\nexport { IPoint, distance, rotate }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ntype LineWalker = (point: IPoint, normal: IPoint) => unknown;\r\n\r\nabstract class LinesBase {\r\n    /** Returns the suggested image size for optimum quality */\r\n    public abstract get suggestedImageSize(): ISize;\r\n    public abstract get nbLines(): number;\r\n\r\n    /**\r\n     * @param lineId integer\r\n     * @param step in canvas pixels\r\n     */\r\n    public abstract walkOnLine(lineId: number, step: number, callback: LineWalker): void;\r\n}\r\n\r\nexport { LineWalker, LinesBase }\r\n","import { distance, IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesPolygon extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _linesSpacing: number;\r\n    private readonly _maxSegments: number;\r\n    private readonly _nbSides: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._linesSpacing = linesSpacing;\r\n        this._nbSides = Parameters.linesSides;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        this._maxSegments = Math.ceil(this._nbSides * diagonal / linesSpacing);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const insideAngle = Math.PI * (this._nbSides - 2) / this._nbSides; // inside angle of a regular polygon\r\n        const dSideLength = 2 * this._linesSpacing / Math.tan(insideAngle / 2) / this._nbSides;\r\n        const startSideLength = 0.5 * dSideLength;\r\n\r\n        const orientationAngle = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientationAngle);\r\n        const sinOrientation = Math.sin(orientationAngle);\r\n\r\n        let startPoint: IPoint = {\r\n            x: this._center.x,\r\n            y: this._center.y,\r\n        };\r\n        for (let iSide = 0; iSide < this._maxSegments; iSide++) {\r\n            const sideLength = startSideLength + iSide * dSideLength;\r\n            const tangentAngle = Math.PI + (iSide % this._nbSides) * 2 * Math.PI / this._nbSides;\r\n\r\n            const endPoint: IPoint = {\r\n                x: startPoint.x + sideLength * Math.cos(tangentAngle),\r\n                y: startPoint.y + sideLength * Math.sin(tangentAngle),\r\n            };\r\n\r\n            const normalAngle = tangentAngle + orientationAngle + Math.PI / 2;\r\n            const normal: IPoint = { x: Math.cos(normalAngle), y: Math.sin(normalAngle) };\r\n\r\n            const segmentLength = distance(startPoint, endPoint);\r\n            for (let iSubstep = 0; iSubstep * step < segmentLength; iSubstep++) {\r\n                const currentLength = iSubstep * step;\r\n                const progression = currentLength / segmentLength;\r\n\r\n                const rawPointX = startPoint.x * (1 - progression) + endPoint.x * progression - this._center.x;\r\n                const rawPointY = startPoint.y * (1 - progression) + endPoint.y * progression - this._center.y;\r\n\r\n                const point: IPoint = {\r\n                    x: cosOrientation * rawPointX - sinOrientation * rawPointY + this._center.x,\r\n                    y: sinOrientation * rawPointX + cosOrientation * rawPointY + this._center.y,\r\n                };\r\n                callback(point, normal);\r\n            }\r\n\r\n            startPoint = endPoint;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesPolygon };\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nclass LinesSines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n    private readonly _frequency: number;\r\n    private readonly _amplitude: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._frequency = Parameters.linesFrequency;\r\n        this._amplitude = Parameters.linesAmplitude * 0.2 * Math.max(imageSize.width, imageSize.height);\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesSines.computeLine(0, linesSpacing, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = this.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesSines.computeLine(iLine, linesSpacing, this._normal, imageSize);\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = { width: imageSize.width, height: imageSize.height };\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        const computePoint = (completion: number): IPoint => {\r\n            const wave = this._amplitude * Math.sin(2 * Math.PI * completion * this._frequency);\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion + wave * this._normal.x,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion + wave * this._normal.y,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, normal: IPoint, imageSize: ISize): ILine {\r\n        const lineLength = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const center: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: center.x - 0.5 * lineLength * tangent.x,\r\n            y: center.y - 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        const end: IPoint = {\r\n            x: center.x + 0.5 * lineLength * tangent.x,\r\n            y: center.y + 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: lineLength, // this is not mathematically accurate\r\n        };\r\n    }\r\n\r\n    private computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const width = imageSize.width + 2 * this._amplitude;\r\n        const height = imageSize.height + 2 * this._amplitude;\r\n\r\n        const diagonal = Math.sqrt(width * width + height * height);\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesSines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesSpiral extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _radiusGap: number;\r\n    private readonly _maxAngle: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._radiusGap = 0.5 * linesSpacing;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const nbSemiCircles = Math.ceil(diagonal / linesSpacing);\r\n        this._maxAngle = nbSemiCircles * Math.PI;\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const orientation = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientation);\r\n        const sinOrientation = Math.sin(orientation);\r\n\r\n        let angle = 0;\r\n        while (angle < this._maxAngle) {\r\n            const cosAngle = Math.cos(angle);\r\n            const sinAngle = Math.sin(angle);\r\n\r\n            const semiCircleId = Math.ceil((angle - orientation) / Math.PI);\r\n            const radius = (semiCircleId + 0.125) * this._radiusGap;\r\n            const centerOffset = this._radiusGap * (0.5 - (semiCircleId % 2));\r\n\r\n            const point: IPoint = {\r\n                x: this._center.x + centerOffset * cosOrientation + radius * cosAngle,\r\n                y: this._center.y + centerOffset * sinOrientation + radius * sinAngle,\r\n            };\r\n            const normal: IPoint = {\r\n                x: -cosAngle,\r\n                y: -sinAngle,\r\n            };\r\n\r\n            callback(point, normal);\r\n\r\n            angle += step / radius;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesSpiral }\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint, distance } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nenum ELinesOrientation {\r\n    HORIZONTAL,\r\n    VERTICAL,\r\n    DIAGONAL,\r\n}\r\n\r\nclass LinesStraightLines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        let linesOrientation = ELinesOrientation.DIAGONAL;\r\n        if (Parameters.orientationInDegrees % 180 === 90) {\r\n            linesOrientation = ELinesOrientation.VERTICAL;\r\n        } else if (Parameters.orientationInDegrees % 180 === 0) {\r\n            linesOrientation = ELinesOrientation.HORIZONTAL;\r\n        }\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesStraightLines.computeLine(0, linesSpacing, linesOrientation, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = LinesStraightLines.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesStraightLines.computeLine(iLine, linesSpacing, linesOrientation, this._normal, imageSize);\r\n\r\n                const ROUNDING_ERROR = 0.1;\r\n\r\n                const xOutOfBounds = line.start.x < -ROUNDING_ERROR || line.start.x > imageSize.width - 1 + ROUNDING_ERROR;\r\n                const yOutOfBounds = line.start.y < -ROUNDING_ERROR || line.start.y > imageSize.height - 1 + ROUNDING_ERROR;\r\n\r\n                if (xOutOfBounds || yOutOfBounds) {\r\n                    break;\r\n                }\r\n\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = LinesStraightLines.computeBestImageSize(imageSize, this._lines.length, linesOrientation);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        function computePoint(completion: number): IPoint {\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, linesOrientation: ELinesOrientation, normal: IPoint, imageSize: ISize): ILine {\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n        const end: IPoint = { x: start.x, y: start.y };\r\n\r\n        const maxX = imageSize.width - 1;\r\n        const maxY = imageSize.height - 1;\r\n\r\n        if (linesOrientation === ELinesOrientation.HORIZONTAL) {\r\n            start.x = 0;\r\n            end.x = maxX;\r\n        } else if (linesOrientation === ELinesOrientation.VERTICAL) {\r\n            start.y = 0;\r\n            end.y = maxY;\r\n        } else {\r\n            const startAdjustment = Math.min(start.x / tangent.x, start.y / tangent.y);\r\n            start.x -= startAdjustment * tangent.x;\r\n            start.y -= startAdjustment * tangent.y;\r\n\r\n            const endAdjustment = Math.min((maxX - end.x) / tangent.x, (maxY - end.y) / tangent.y);\r\n            end.x += endAdjustment * tangent.x;\r\n            end.y += endAdjustment * tangent.y;\r\n        }\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: distance(start, end),\r\n        };\r\n    }\r\n\r\n    private static computeBestImageSize(imageSize: ISize, nbLines: number, orientation: ELinesOrientation): ISize {\r\n        if (orientation === ELinesOrientation.HORIZONTAL) {\r\n            return {\r\n                width: imageSize.width,\r\n                height: nbLines,\r\n            };\r\n        } else if (orientation === ELinesOrientation.VERTICAL) {\r\n            return {\r\n                width: nbLines,\r\n                height: imageSize.height,\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n    }\r\n\r\n    private static computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height)\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesStraightLines }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\n\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(image: InputImage, plotter: PlotterBase): void {\r\n    const start = Date.now();\r\n\r\n    if (image == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    const displayInfos = Helpers.buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    const plotterSize = plotter.size;\r\n    const imageFitting = Helpers.fitImageInPlotter(plotterSize, image.sourceImageAspectRatio);\r\n\r\n    const baseLineSpacing = 1 / Parameters.linesCount;\r\n    const linesSpacing = baseLineSpacing * imageFitting.zoomFactor;\r\n\r\n    const baseMaxFrequency = 500 * Parameters.maxFrequency;\r\n    const maxFrequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n\r\n    const maxAmplitude = 0.5 * (linesSpacing - displayInfos.lineThickness) * Parameters.maxAmplitude;\r\n\r\n    const lines = Helpers.chooseLines(imageFitting.sizeInPlotter, linesSpacing);\r\n\r\n    image.resize(lines.suggestedImageSize);\r\n\r\n    const samplingFunction = Helpers.chooseBestSamplingFunction();\r\n    const normalRotation = Helpers.computeNormalRotationFunction();\r\n    const waveFunction = Helpers.computeWaveFunction();\r\n\r\n    const samplesPerPixel = Math.max(1, 2 * maxFrequency);\r\n    const step = 1 / samplesPerPixel;\r\n    for (let iLine = 0; iLine < lines.nbLines; iLine++) {\r\n        let phase = 0;\r\n        lines.walkOnLine(iLine, step, (point: IPoint, normal: IPoint) => {\r\n            const normalizedCoords: IPoint = {\r\n                x: point.x / (imageFitting.sizeInPlotter.width - 1),\r\n                y: point.y / (imageFitting.sizeInPlotter.height - 1),\r\n            };\r\n\r\n            const outOfImage = normalizedCoords.x < 0 || normalizedCoords.x > 1 || normalizedCoords.y < 0 || normalizedCoords.y > 1;\r\n            if (outOfImage) {\r\n                if (plotter.hasStartedALine) {\r\n                    plotter.endLine();\r\n                }\r\n                return;\r\n            } else if (!plotter.hasStartedALine) {\r\n                plotter.startLine();\r\n            }\r\n\r\n            const localDarkness = samplingFunction(inputImage, normalizedCoords);\r\n\r\n            const localAmplitude = localDarkness * maxAmplitude;\r\n            const localHeight = waveFunction(phase, localAmplitude);\r\n\r\n            const rotatedNormal = normalRotation(normal);\r\n            const dX = localHeight * rotatedNormal.x;\r\n            const dY = localHeight * rotatedNormal.y;\r\n\r\n            const absolutePoint = imageFitting.relativeToAbsolute(point);\r\n            plotter.addPointToLine(absolutePoint.x + dX, absolutePoint.y + dY);\r\n\r\n            const localFrequency = localDarkness * maxFrequency;\r\n            phase += localFrequency * step;\r\n        });\r\n\r\n        if (plotter.hasStartedALine) {\r\n            plotter.endLine();\r\n        }\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${Date.now() - start} ms.`);\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\n\r\nconst canvasPlotter = new PlotterCanvas2D();\r\nfunction plotOnCanvas(): void {\r\n    plot(inputImage, canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nParameters.addDownloadObserver(() => {\r\n    const svgPlotter = new PlotterSVG();\r\n    plot(inputImage, svgPlotter);\r\n\r\n    const fileName = \"image-as-sines.svg\";\r\n    const fileType = \"text/plain\";\r\n    const svgString = svgPlotter.export();\r\n\r\n    const blob = new Blob([svgString], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    LINES_TYPE: \"lines-type-tabs-id\",\r\n    LINES_COUNT: \"lines-count-range-id\",\r\n    ORIENTATION: \"orientation-range-id\",\r\n    LINES_SIDES: \"lines-sides-range-id\",\r\n    LINES_AMPLITUDE: \"lines-amplitude-range-id\",\r\n    LINES_FREQUENCY: \"lines-frequency-range-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    WAVE_SQUARENESS: \"wave-squareness-range-id\",\r\n    LINE_THICKNESS: \"line-thickness-range-id\",\r\n    ROUND_LINECAP: \"round-linecap-checkbox-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    TRUE_INTENSITY: \"true-intensity-checkbox-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\nenum ELinesType {\r\n    STRAIGHT = \"0\",\r\n    SPIRAL = \"1\",\r\n    POLYGON = \"2\",\r\n    SINES = \"3\",\r\n}\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_COUNT, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ORIENTATION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_SIDES, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.WAVE_SQUARENESS, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_THICKNESS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ROUND_LINECAP, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.TRUE_INTENSITY, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nfunction udpateLinesControlsVisibility(): void {\r\n    const type = Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    Page.Controls.setVisibility(controlId.LINES_SIDES, type === ELinesType.POLYGON);\r\n    Page.Controls.setVisibility(controlId.LINES_AMPLITUDE, type === ELinesType.SINES);\r\n    Page.Controls.setVisibility(controlId.LINES_FREQUENCY, type === ELinesType.SINES);\r\n}\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, udpateLinesControlsVisibility);\r\nudpateLinesControlsVisibility();\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get linesType(): ELinesType {\r\n        return Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    }\r\n\r\n    public static get linesCount(): number {\r\n        return Page.Range.getValue(controlId.LINES_COUNT);\r\n    }\r\n\r\n    public static get orientationInDegrees(): number {\r\n        return Page.Range.getValue(controlId.ORIENTATION);\r\n    }\r\n    public static get orientationInRadians(): number {\r\n        return this.orientationInDegrees / 180 * Math.PI;\r\n    }\r\n\r\n    public static get linesSides(): number {\r\n        return Page.Range.getValue(controlId.LINES_SIDES);\r\n    }\r\n\r\n    public static get linesAmplitude(): number {\r\n        return Page.Range.getValue(controlId.LINES_AMPLITUDE);\r\n    }\r\n\r\n    public static get linesFrequency(): number {\r\n        return Page.Range.getValue(controlId.LINES_FREQUENCY);\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get waveSquareness(): number {\r\n        return Page.Range.getValue(controlId.WAVE_SQUARENESS);\r\n    }\r\n\r\n    public static get lineThickness(): number {\r\n        return Page.Range.getValue(controlId.LINE_THICKNESS);\r\n    }\r\n\r\n    public static get roundLinecap(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ROUND_LINECAP);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get trueIntensity(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TRUE_INTENSITY);\r\n    }\r\n\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, ELinesType }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineThickness: number;\r\n    blur: number;\r\n}\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public get hasStartedALine(): boolean {\r\n        return this._hasStartedALine;\r\n    }\r\n\r\n    public startLine(): void {\r\n        this._hasStartedALine = true;\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n        this._hasStartedALine = false;\r\n    }\r\n\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n    private _hasStartedALine: boolean = false;\r\n}\r\n\r\nexport { PlotterBase, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { Parameters } from \"../parameters\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.resizeCanvas();\r\n\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineThickness * this.cssPixel;\r\n        this.context.lineJoin = \"round\";\r\n        this.context.lineCap = Parameters.roundLinecap ? \"round\" : \"butt\";\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { Parameters } from \"../parameters\";\r\nimport { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${infos.backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${WIDTH}\" height=\"${HEIGHT}\"/>\\n`);\r\n        const linecap = Parameters.roundLinecap ? ` stroke-linecap=\"round\"` : ``;\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineThickness}\" stroke-linejoin=\"round\"${linecap}>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}