{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/helpers.ts","webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/interfaces/i-point.ts","webpack://image-stylization-sines/./src/ts/lines/lines-base.ts","webpack://image-stylization-sines/./src/ts/lines/lines-polygon.ts","webpack://image-stylization-sines/./src/ts/lines/lines-sines.ts","webpack://image-stylization-sines/./src/ts/lines/lines-spiral.ts","webpack://image-stylization-sines/./src/ts/lines/lines-straight-lines.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-base.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-dithering.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-wave.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":[],"mappings":"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AC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;KACnD,CAAC;IA2EN,uBAAC;CAAA,CAtG8B,0BAA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","file":"main.min.js","sourcesContent":["import { ISize } from \"./interfaces/i-size\";\r\nimport { Parameters, ELinesType, EPattern } from \"./parameters\";\r\nimport { LinesBase } from \"./lines/lines-base\";\r\nimport { LinesStraightLines } from \"./lines/lines-straight-lines\";\r\nimport { LinesSines } from \"./lines/lines-sines\";\r\nimport { LinesSpiral } from \"./lines/lines-spiral\";\r\nimport { IImageFitting } from \"./plotter/plotter-base\";\r\nimport { LinesPolygon } from \"./lines/lines-polygon\";\r\nimport { PatternWave } from \"./pattern/pattern-wave\";\r\nimport { PatternBase } from \"./pattern/pattern-base\";\r\nimport { PatternDithering } from \"./pattern/pattern-dithering\";\r\n\r\n\r\nfunction chooseLines(imageSizeInPlotter: ISize, linesSpacing: number): LinesBase {\r\n    const chosenType = Parameters.linesType;\r\n    if (chosenType === ELinesType.STRAIGHT) {\r\n        return new LinesStraightLines(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.SPIRAL) {\r\n        return new LinesSpiral(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.POLYGON) {\r\n        return new LinesPolygon(imageSizeInPlotter, linesSpacing);\r\n    } else {\r\n        return new LinesSines(imageSizeInPlotter, linesSpacing);\r\n    }\r\n}\r\n\r\nfunction choosePattern(imageFitting: IImageFitting, linesSpacing: number): PatternBase {\r\n    const pattern = Parameters.pattern;\r\n    if (pattern === EPattern.WAVES) {\r\n        return new PatternWave(imageFitting, linesSpacing);\r\n    } else {\r\n        return new PatternDithering(imageFitting, linesSpacing);\r\n    }\r\n}\r\n\r\nfunction downloadTextFile(content: string, filename: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, filename);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = filename;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport {\r\n    chooseLines,\r\n    choosePattern,\r\n    downloadTextFile,\r\n};\r\n","import { ISize } from \"./interfaces/i-size\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nclass InputImage {\r\n    private _size: ISize;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.resize({ width: image.width, height: image.height });\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._size.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._size.height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(wantedSize: ISize): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, wantedSize.width);\r\n        const wantedHeight = Math.min(this.sourceImage.height, wantedSize.height);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            console.log(`Resize image from ${this.width}x${this.height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._size.width = wantedWidth;\r\n            this._size.height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1]. Performs linear interpolation. */\r\n    public sample(normalizedCoords: IPoint): number {\r\n        const pixelCoords: IPoint = {\r\n            x: normalizedCoords.x * (this._size.width - 1),\r\n            y: normalizedCoords.y * (this._size.height - 1),\r\n        }\r\n\r\n        const floorPixelCoords: IPoint = {\r\n            x: Math.floor(pixelCoords.x),\r\n            y: Math.floor(pixelCoords.y),\r\n        };\r\n        const fractPixelCoords: IPoint = {\r\n            x: pixelCoords.x - floorPixelCoords.x,\r\n            y: pixelCoords.y - floorPixelCoords.y,\r\n        };\r\n\r\n        const topLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y);\r\n        const topRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y);\r\n        const bottomLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y + 1);\r\n        const bottomRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y + 1);\r\n\r\n        const top = this.interpolate(topLeft, topRight, fractPixelCoords.x);\r\n        const bottom = this.interpolate(bottomLeft, bottomRight, fractPixelCoords.x);\r\n\r\n        const interpolated = this.interpolate(top, bottom, fractPixelCoords.y);\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    private interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 - x) + b * x;\r\n    }\r\n\r\n    /** Returns a value in [0, 255]. No interpolation.\r\n     * @param x in pixels, must be an integer\r\n     * @param y in pixels, must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction distance(a: IPoint, b: IPoint): number {\r\n    const dX = a.x - b.x;\r\n    const dY = a.y - b.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction rotate(p: IPoint, angle: number): IPoint {\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n\r\n    return {\r\n        x: p.x * cosAngle - p.y * sinAngle,\r\n        y: p.x * sinAngle + p.y * cosAngle,\r\n    };\r\n}\r\n\r\nexport { IPoint, distance, rotate }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ntype LineWalker = (point: IPoint, normal: IPoint) => unknown;\r\n\r\nabstract class LinesBase {\r\n    /** Returns the suggested image size for optimum quality */\r\n    public abstract get suggestedImageSize(): ISize;\r\n    public abstract get nbLines(): number;\r\n\r\n    /**\r\n     * @param lineId integer\r\n     * @param step in canvas pixels\r\n     */\r\n    public abstract walkOnLine(lineId: number, step: number, callback: LineWalker): void;\r\n}\r\n\r\nexport { LineWalker, LinesBase }\r\n","import { distance, IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesPolygon extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _linesSpacing: number;\r\n    private readonly _maxSegments: number;\r\n    private readonly _nbSides: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._linesSpacing = linesSpacing;\r\n        this._nbSides = Parameters.linesSides;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        this._maxSegments = Math.ceil(this._nbSides * diagonal / linesSpacing);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const insideAngle = Math.PI * (this._nbSides - 2) / this._nbSides; // inside angle of a regular polygon\r\n        const dSideLength = 2 * this._linesSpacing / Math.tan(insideAngle / 2) / this._nbSides;\r\n        const startSideLength = 0.5 * dSideLength;\r\n\r\n        const orientationAngle = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientationAngle);\r\n        const sinOrientation = Math.sin(orientationAngle);\r\n\r\n        let startPoint: IPoint = {\r\n            x: this._center.x,\r\n            y: this._center.y,\r\n        };\r\n        for (let iSide = 0; iSide < this._maxSegments; iSide++) {\r\n            const sideLength = startSideLength + iSide * dSideLength;\r\n            const tangentAngle = Math.PI + (iSide % this._nbSides) * 2 * Math.PI / this._nbSides;\r\n\r\n            const endPoint: IPoint = {\r\n                x: startPoint.x + sideLength * Math.cos(tangentAngle),\r\n                y: startPoint.y + sideLength * Math.sin(tangentAngle),\r\n            };\r\n\r\n            const normalAngle = tangentAngle + orientationAngle + Math.PI / 2;\r\n            const normal: IPoint = { x: Math.cos(normalAngle), y: Math.sin(normalAngle) };\r\n\r\n            const segmentLength = distance(startPoint, endPoint);\r\n            for (let iSubstep = 0; iSubstep * step < segmentLength; iSubstep++) {\r\n                const currentLength = iSubstep * step;\r\n                const progression = currentLength / segmentLength;\r\n\r\n                const rawPointX = startPoint.x * (1 - progression) + endPoint.x * progression - this._center.x;\r\n                const rawPointY = startPoint.y * (1 - progression) + endPoint.y * progression - this._center.y;\r\n\r\n                const point: IPoint = {\r\n                    x: cosOrientation * rawPointX - sinOrientation * rawPointY + this._center.x,\r\n                    y: sinOrientation * rawPointX + cosOrientation * rawPointY + this._center.y,\r\n                };\r\n                callback(point, normal);\r\n            }\r\n\r\n            startPoint = endPoint;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesPolygon };\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nclass LinesSines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n    private readonly _frequency: number;\r\n    private readonly _amplitude: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._frequency = Parameters.linesFrequency;\r\n        this._amplitude = Parameters.linesAmplitude * 0.2 * Math.max(imageSize.width, imageSize.height);\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesSines.computeLine(0, linesSpacing, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = this.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesSines.computeLine(iLine, linesSpacing, this._normal, imageSize);\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = { width: imageSize.width, height: imageSize.height };\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        const computePoint = (completion: number): IPoint => {\r\n            const wave = this._amplitude * Math.sin(2 * Math.PI * completion * this._frequency);\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion + wave * this._normal.x,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion + wave * this._normal.y,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, normal: IPoint, imageSize: ISize): ILine {\r\n        const lineLength = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const center: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: center.x - 0.5 * lineLength * tangent.x,\r\n            y: center.y - 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        const end: IPoint = {\r\n            x: center.x + 0.5 * lineLength * tangent.x,\r\n            y: center.y + 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: lineLength, // this is not mathematically accurate\r\n        };\r\n    }\r\n\r\n    private computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const width = imageSize.width + 2 * this._amplitude;\r\n        const height = imageSize.height + 2 * this._amplitude;\r\n\r\n        const diagonal = Math.sqrt(width * width + height * height);\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesSines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesSpiral extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _radiusGap: number;\r\n    private readonly _maxAngle: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._radiusGap = 0.5 * linesSpacing;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const nbSemiCircles = Math.ceil(diagonal / linesSpacing);\r\n        this._maxAngle = nbSemiCircles * Math.PI;\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const orientation = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientation);\r\n        const sinOrientation = Math.sin(orientation);\r\n\r\n        let angle = 0;\r\n        while (angle < this._maxAngle) {\r\n            const cosAngle = Math.cos(angle);\r\n            const sinAngle = Math.sin(angle);\r\n\r\n            const semiCircleId = Math.ceil((angle - orientation) / Math.PI);\r\n            const radius = (semiCircleId + 0.125) * this._radiusGap;\r\n            const centerOffset = this._radiusGap * (0.5 - (semiCircleId % 2));\r\n\r\n            const point: IPoint = {\r\n                x: this._center.x + centerOffset * cosOrientation + radius * cosAngle,\r\n                y: this._center.y + centerOffset * sinOrientation + radius * sinAngle,\r\n            };\r\n            const normal: IPoint = {\r\n                x: -cosAngle,\r\n                y: -sinAngle,\r\n            };\r\n\r\n            callback(point, normal);\r\n\r\n            angle += step / radius;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesSpiral }\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint, distance } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nenum ELinesOrientation {\r\n    HORIZONTAL,\r\n    VERTICAL,\r\n    DIAGONAL,\r\n}\r\n\r\nclass LinesStraightLines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        let linesOrientation = ELinesOrientation.DIAGONAL;\r\n        if (Parameters.orientationInDegrees % 180 === 90) {\r\n            linesOrientation = ELinesOrientation.VERTICAL;\r\n        } else if (Parameters.orientationInDegrees % 180 === 0) {\r\n            linesOrientation = ELinesOrientation.HORIZONTAL;\r\n        }\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesStraightLines.computeLine(0, linesSpacing, linesOrientation, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = LinesStraightLines.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesStraightLines.computeLine(iLine, linesSpacing, linesOrientation, this._normal, imageSize);\r\n\r\n                const ROUNDING_ERROR = 0.1;\r\n\r\n                const xOutOfBounds = line.start.x < -ROUNDING_ERROR || line.start.x > imageSize.width - 1 + ROUNDING_ERROR;\r\n                const yOutOfBounds = line.start.y < -ROUNDING_ERROR || line.start.y > imageSize.height - 1 + ROUNDING_ERROR;\r\n\r\n                if (xOutOfBounds || yOutOfBounds) {\r\n                    break;\r\n                }\r\n\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = LinesStraightLines.computeBestImageSize(imageSize, this._lines.length, linesOrientation);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        function computePoint(completion: number): IPoint {\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, linesOrientation: ELinesOrientation, normal: IPoint, imageSize: ISize): ILine {\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n        const end: IPoint = { x: start.x, y: start.y };\r\n\r\n        const maxX = imageSize.width - 1;\r\n        const maxY = imageSize.height - 1;\r\n\r\n        if (linesOrientation === ELinesOrientation.HORIZONTAL) {\r\n            start.x = 0;\r\n            end.x = maxX;\r\n        } else if (linesOrientation === ELinesOrientation.VERTICAL) {\r\n            start.y = 0;\r\n            end.y = maxY;\r\n        } else {\r\n            const startAdjustment = Math.min(start.x / tangent.x, start.y / tangent.y);\r\n            start.x -= startAdjustment * tangent.x;\r\n            start.y -= startAdjustment * tangent.y;\r\n\r\n            const endAdjustment = Math.min((maxX - end.x) / tangent.x, (maxY - end.y) / tangent.y);\r\n            end.x += endAdjustment * tangent.x;\r\n            end.y += endAdjustment * tangent.y;\r\n        }\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: distance(start, end),\r\n        };\r\n    }\r\n\r\n    private static computeBestImageSize(imageSize: ISize, nbLines: number, orientation: ELinesOrientation): ISize {\r\n        if (orientation === ELinesOrientation.HORIZONTAL) {\r\n            return {\r\n                width: imageSize.width,\r\n                height: nbLines,\r\n            };\r\n        } else if (orientation === ELinesOrientation.VERTICAL) {\r\n            return {\r\n                width: nbLines,\r\n                height: imageSize.height,\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n    }\r\n\r\n    private static computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height)\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesStraightLines }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(image: InputImage, plotter: PlotterBase): void {\r\n    const start = performance.now();\r\n\r\n    if (image == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    plotter.resize();\r\n\r\n    const imageFitting = plotter.fitImage(image.sourceImageAspectRatio);\r\n\r\n    const baseLineSpacing = 1 / Parameters.linesCount;\r\n    const linesSpacing = baseLineSpacing * imageFitting.zoomFactor;\r\n\r\n    const lines = Helpers.chooseLines(imageFitting.sizeInPlotter, linesSpacing);\r\n    const pattern = Helpers.choosePattern(imageFitting, linesSpacing);\r\n\r\n    image.resize(lines.suggestedImageSize);\r\n\r\n    const displayInfos = pattern.buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    for (let iLine = 0; iLine < lines.nbLines; iLine++) {\r\n        pattern.drawLine(lines, iLine, image, plotter);\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${performance.now() - start} ms.`);\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\nconst canvasPlotter = new PlotterCanvas2D();\r\n\r\nfunction plotOnCanvas(): void {\r\n    plot(inputImage, canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nParameters.addDownloadObserver(() => {\r\n    const svgPlotter = new PlotterSVG();\r\n    plot(inputImage, svgPlotter);\r\n    const svgString = svgPlotter.export();\r\n    const filename = \"image-as-sines.svg\";\r\n    Helpers.downloadTextFile(svgString, filename);\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    LINES_TYPE: \"lines-type-tabs-id\",\r\n    LINES_COUNT: \"lines-count-range-id\",\r\n    ORIENTATION: \"orientation-range-id\",\r\n    LINES_SIDES: \"lines-sides-range-id\",\r\n    LINES_AMPLITUDE: \"lines-amplitude-range-id\",\r\n    LINES_FREQUENCY: \"lines-frequency-range-id\",\r\n    PATTERN: \"pattern-tabs-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    WAVE_SQUARENESS: \"wave-squareness-range-id\",\r\n    LINE_THICKNESS: \"line-thickness-range-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\nenum ELinesType {\r\n    STRAIGHT = \"0\",\r\n    SPIRAL = \"1\",\r\n    POLYGON = \"2\",\r\n    SINES = \"3\",\r\n}\r\n\r\nenum EPattern {\r\n    WAVES = \"0\",\r\n    DITHERING = \"1\",\r\n}\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_COUNT, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ORIENTATION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_SIDES, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_FREQUENCY, triggerRedraw);\r\nPage.Tabs.addObserver(controlId.PATTERN, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.WAVE_SQUARENESS, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_THICKNESS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get linesType(): ELinesType {\r\n        return Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    }\r\n\r\n    public static get linesCount(): number {\r\n        return Page.Range.getValue(controlId.LINES_COUNT);\r\n    }\r\n\r\n    public static get orientationInDegrees(): number {\r\n        return Page.Range.getValue(controlId.ORIENTATION);\r\n    }\r\n    public static get orientationInRadians(): number {\r\n        return this.orientationInDegrees / 180 * Math.PI;\r\n    }\r\n\r\n    public static get linesSides(): number {\r\n        return Page.Range.getValue(controlId.LINES_SIDES);\r\n    }\r\n\r\n    public static get linesAmplitude(): number {\r\n        return Page.Range.getValue(controlId.LINES_AMPLITUDE);\r\n    }\r\n\r\n    public static get linesFrequency(): number {\r\n        return Page.Range.getValue(controlId.LINES_FREQUENCY);\r\n    }\r\n\r\n    public static get pattern(): EPattern {\r\n        return Page.Tabs.getValues(controlId.PATTERN)[0] as EPattern;\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get waveSquareness(): number {\r\n        return Page.Range.getValue(controlId.WAVE_SQUARENESS);\r\n    }\r\n\r\n    public static get lineThickness(): number {\r\n        return Page.Range.getValue(controlId.LINE_THICKNESS);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nfunction udpateControlsVisibility(): void {\r\n    const type = Parameters.linesType;\r\n    Page.Controls.setVisibility(controlId.LINES_SIDES, type === ELinesType.POLYGON);\r\n    Page.Controls.setVisibility(controlId.LINES_AMPLITUDE, type === ELinesType.SINES);\r\n    Page.Controls.setVisibility(controlId.LINES_FREQUENCY, type === ELinesType.SINES);\r\n\r\n    const pattern = Parameters.pattern;\r\n    Page.Controls.setVisibility(controlId.ANGLE, pattern === EPattern.WAVES);\r\n    Page.Controls.setVisibility(controlId.WAVE_SQUARENESS, pattern === EPattern.WAVES);\r\n    Page.Controls.setVisibility(controlId.LINE_THICKNESS, pattern === EPattern.WAVES);\r\n}\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, udpateControlsVisibility);\r\nPage.Tabs.addObserver(controlId.PATTERN, udpateControlsVisibility);\r\nudpateControlsVisibility();\r\n\r\nexport { Parameters, ELinesType, EPattern }\r\n","import { InputImage } from \"../input-image\";\r\nimport { LinesBase } from \"../lines/lines-base\";\r\nimport { IPlotterInfo, PlotterBase } from \"../plotter/plotter-base\";\r\n\r\nabstract class PatternBase {\r\n    public abstract buildPlotterInfos(): IPlotterInfo;\r\n    public abstract drawLine(lines: LinesBase, lineId: number, image: InputImage, plotter: PlotterBase): void;\r\n}\r\n\r\nexport { PatternBase };\r\n","import { InputImage } from \"../input-image\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LinesBase } from \"../lines/lines-base\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { PlotterBase, IImageFitting, IPlotterInfo } from \"../plotter/plotter-base\";\r\nimport { PatternBase } from \"./pattern-base\";\r\n\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\n\r\nfunction clamp(min: number, max: number, x: number): number {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n    return x;\r\n}\r\n\r\nclass PatternDithering extends PatternBase {\r\n    private readonly samplingFunction: SamplingFunction;\r\n\r\n    private readonly imageFitting: IImageFitting;\r\n\r\n    private readonly linesThickness: number;\r\n\r\n    private readonly step: number;\r\n\r\n    private static readonly ditheringPatterns: number[][] = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n        [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],\r\n        [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],\r\n        [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0],\r\n        [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\r\n        [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],\r\n        [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\r\n        [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0],\r\n        [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0],\r\n        [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\r\n        [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1],\r\n        [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\r\n        [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],\r\n        [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],\r\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    ];\r\n\r\n    public constructor(imageFitting: IImageFitting, linesSpacing: number) {\r\n        super();\r\n\r\n        this.samplingFunction = PatternDithering.chooseBestSamplingFunction();\r\n\r\n        this.imageFitting = imageFitting;\r\n\r\n        this.linesThickness = Math.max(1, Parameters.maxAmplitude * linesSpacing);\r\n\r\n        const MIN_FREQUENCY = 10;\r\n        const MAX_FREQUENCY = 500;\r\n        const xFrequency = Parameters.maxFrequency;\r\n        const baseMaxFrequency = MIN_FREQUENCY * (1 - xFrequency) + MAX_FREQUENCY * xFrequency;\r\n        const frequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n        this.step = 1 / frequency;\r\n    }\r\n\r\n    public buildPlotterInfos(): IPlotterInfo {\r\n        return {\r\n            backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n            lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n            lineThickness: this.linesThickness,\r\n            roundLinecap: false,\r\n            blur: Parameters.blur,\r\n        };\r\n    }\r\n\r\n    public drawLine(lines: LinesBase, lineId: number, image: InputImage, plotter: PlotterBase): void {\r\n        let iPortion = Math.round(1000 * Math.random());\r\n\r\n        lines.walkOnLine(lineId, this.step, (point: IPoint) => {\r\n            const normalizedCoords = this.imageFitting.pixelToRelative(point);\r\n\r\n            const outOfImage = normalizedCoords.x < 0 || normalizedCoords.x > 1 || normalizedCoords.y < 0 || normalizedCoords.y > 1;\r\n            if (outOfImage) {\r\n                if (plotter.hasStartedALine) {\r\n                    plotter.endLine();\r\n                }\r\n            } else {\r\n                const localDarkness = clamp(0, 1, this.samplingFunction(image, normalizedCoords));\r\n\r\n                const iQuantifiedColor = Math.floor(localDarkness * 0.99 * PatternDithering.ditheringPatterns.length);\r\n                const ditheringPattern = PatternDithering.ditheringPatterns[iQuantifiedColor];\r\n                const isDarkPortion = ditheringPattern[Math.floor(iPortion % ditheringPattern.length)] > 0.5;\r\n\r\n                if (isDarkPortion) {\r\n                    if (!plotter.hasStartedALine) {\r\n                        plotter.startLine();\r\n                    }\r\n                    const absolutePoint = this.imageFitting.relativeToAbsolute(point);\r\n                    plotter.addPointToLine(absolutePoint.x, absolutePoint.y);\r\n                } else if (plotter.hasStartedALine) {\r\n                    const absolutePoint = this.imageFitting.relativeToAbsolute(point);\r\n                    plotter.addPointToLine(absolutePoint.x, absolutePoint.y);\r\n                    plotter.endLine();\r\n                }\r\n\r\n                iPortion++;\r\n            }\r\n        });\r\n\r\n        if (plotter.hasStartedALine) {\r\n            plotter.endLine();\r\n        }\r\n    }\r\n\r\n    private static chooseBestSamplingFunction(): SamplingFunction {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => inputImage.sample(coords);\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => 1 - inputImage.sample(coords);\r\n        }\r\n    }\r\n}\r\n\r\nexport { PatternDithering };\r\n","import { InputImage } from \"../input-image\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LinesBase } from \"../lines/lines-base\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { PlotterBase, IImageFitting, IPlotterInfo } from \"../plotter/plotter-base\";\r\nimport { PatternBase } from \"./pattern-base\";\r\n\r\ntype WaveFunction = (phase: number, amplitude: number) => number;\r\ntype NormalRotationFunction = (normal: IPoint) => IPoint;\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\n\r\nclass PatternWave extends PatternBase {\r\n    private readonly waveFunction: WaveFunction;\r\n    private readonly normalRotationFunction: NormalRotationFunction;\r\n    private readonly samplingFunction: SamplingFunction;\r\n\r\n    private readonly imageFitting: IImageFitting;\r\n\r\n    private readonly maxAmplitude: number;\r\n    private readonly maxFrequency: number;\r\n    private readonly step: number;\r\n\r\n    public constructor(imageFitting: IImageFitting, linesSpacing: number) {\r\n        super();\r\n\r\n        this.waveFunction = PatternWave.computeWaveFunction();\r\n        this.normalRotationFunction = PatternWave.computeNormalRotationFunction();\r\n        this.samplingFunction = PatternWave.chooseBestSamplingFunction();\r\n\r\n        this.imageFitting = imageFitting;\r\n\r\n        const baseMaxFrequency = 2500 * Parameters.maxFrequency;\r\n        this.maxFrequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n\r\n        this.maxAmplitude = 0.5 * (linesSpacing - Parameters.lineThickness) * Parameters.maxAmplitude;\r\n\r\n        const samplesPerPixel = Math.max(1, 2 * this.maxFrequency);\r\n        this.step = 1 / samplesPerPixel;\r\n    }\r\n\r\n    public buildPlotterInfos(): IPlotterInfo {\r\n        return {\r\n            backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n            lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n            lineThickness: Parameters.lineThickness,\r\n            roundLinecap: true,\r\n            blur: Parameters.blur,\r\n        };\r\n    }\r\n\r\n    public drawLine(lines: LinesBase, lineId: number, image: InputImage, plotter: PlotterBase): void {\r\n        let phase = 0;\r\n\r\n        lines.walkOnLine(lineId, this.step, (point: IPoint, normal: IPoint) => {\r\n            const normalizedCoords = this.imageFitting.pixelToRelative(point);\r\n\r\n            const outOfImage = normalizedCoords.x < 0 || normalizedCoords.x > 1 || normalizedCoords.y < 0 || normalizedCoords.y > 1;\r\n            if (outOfImage) {\r\n                if (plotter.hasStartedALine) {\r\n                    plotter.endLine();\r\n                }\r\n            } else {\r\n                const localDarkness = this.samplingFunction(image, normalizedCoords);\r\n\r\n                const localAmplitude = localDarkness * this.maxAmplitude;\r\n                const localHeight = this.waveFunction(phase, localAmplitude);\r\n\r\n                const rotatedNormal = this.normalRotationFunction(normal);\r\n                const dX = localHeight * rotatedNormal.x;\r\n                const dY = localHeight * rotatedNormal.y;\r\n\r\n                const absolutePoint = this.imageFitting.relativeToAbsolute(point);\r\n                if (!plotter.hasStartedALine) {\r\n                    plotter.startLine();\r\n                }\r\n                plotter.addPointToLine(absolutePoint.x + dX, absolutePoint.y + dY);\r\n\r\n                const localFrequency = localDarkness * this.maxFrequency;\r\n                phase += localFrequency * this.step;\r\n            }\r\n        });\r\n\r\n        if (plotter.hasStartedALine) {\r\n            plotter.endLine();\r\n        }\r\n    }\r\n\r\n    private static computeNormalRotationFunction(): NormalRotationFunction {\r\n        const angle = Parameters.angle * 2 * Math.PI;\r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const lengthAdjustment = 1 / cosAngle; // to maintain the waves height no matter the angle\r\n        return (normal: IPoint): IPoint => {\r\n            return {\r\n                x: (cosAngle * normal.x - sinAngle * normal.y) * lengthAdjustment,\r\n                y: (sinAngle * normal.x + cosAngle * normal.y) * lengthAdjustment,\r\n            };\r\n        };\r\n    }\r\n\r\n    private static computeWaveFunction(): WaveFunction {\r\n        if (Parameters.waveSquareness < 0.005) {\r\n            return (phase: number, amplitude: number) => amplitude * Math.sin(phase);\r\n        }\r\n\r\n        const sharpness = 1 - 0.99 * Parameters.waveSquareness;\r\n        return (phase: number, amplitude: number) => {\r\n            const sinPhase = Math.sin(phase);\r\n            return amplitude * Math.sign(sinPhase) * Math.pow(Math.abs(sinPhase), sharpness);\r\n        };\r\n    }\r\n\r\n    private static chooseBestSamplingFunction(): SamplingFunction {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(inputImage.sample(coords));\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(1.001 - inputImage.sample(coords));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport { PatternWave };\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineThickness: number;\r\n    roundLinecap: boolean;\r\n    blur: number;\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize,\r\n    relativeToAbsolute: (relativeCoords: IPoint) => IPoint;\r\n    pixelToRelative: (pixelCoords: IPoint) => IPoint;\r\n    zoomFactor: number,\r\n};\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract resize(): void;\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public get hasStartedALine(): boolean {\r\n        return this._hasStartedALine;\r\n    }\r\n\r\n    public startLine(): void {\r\n        this._hasStartedALine = true;\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n        this._hasStartedALine = false;\r\n    }\r\n\r\n    public fitImage(imageAspectRatio: number): IImageFitting {\r\n        const plotterSize = this.size;\r\n        const displayAspectRatio = plotterSize.width / plotterSize.height;\r\n\r\n        const sizeInPlotter: ISize = {\r\n            width: plotterSize.width,\r\n            height: plotterSize.height,\r\n        };\r\n        if (imageAspectRatio > displayAspectRatio) {\r\n            sizeInPlotter.height = Math.floor(sizeInPlotter.height * displayAspectRatio / imageAspectRatio);\r\n        } else if (imageAspectRatio < displayAspectRatio) {\r\n            sizeInPlotter.width = Math.floor(sizeInPlotter.width * imageAspectRatio / displayAspectRatio);\r\n        }\r\n\r\n        const offSetX = 0.5 * (plotterSize.width - sizeInPlotter.width);\r\n        const offSetY = 0.5 * (plotterSize.height - sizeInPlotter.height);\r\n        const relativeToAbsolute = (relativeCoords: IPoint): IPoint => {\r\n            return {\r\n                x: relativeCoords.x + offSetX,\r\n                y: relativeCoords.y + offSetY,\r\n            };\r\n        };\r\n\r\n        const minSide = Math.min(sizeInPlotter.width, sizeInPlotter.height);\r\n        const baseMinSide = Math.min(imageAspectRatio, 1 / imageAspectRatio);\r\n\r\n        return {\r\n            sizeInPlotter,\r\n            relativeToAbsolute,\r\n            pixelToRelative: (pixelCoordinates: IPoint) => {\r\n                return {\r\n                    x: pixelCoordinates.x / (sizeInPlotter.width - 1),\r\n                    y: pixelCoordinates.y / (sizeInPlotter.height - 1),\r\n                }\r\n            },\r\n            zoomFactor: minSide / baseMinSide,\r\n        };\r\n    }\r\n\r\n    protected abstract get size(): ISize;\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n    private _hasStartedALine: boolean = false;\r\n}\r\n\r\nexport { PlotterBase, IImageFitting, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public resize(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineThickness * this.cssPixel;\r\n        this.context.lineJoin = \"round\";\r\n        this.context.lineCap = infos.roundLinecap ? \"round\" : \"butt\";\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public resize(): void {\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${infos.backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${WIDTH}\" height=\"${HEIGHT}\"/>\\n`);\r\n        const linecap = infos.roundLinecap ? ` stroke-linecap=\"round\"` : ``;\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineThickness}\" stroke-linejoin=\"round\"${linecap}>\\n`);\r\n    }\r\n\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n__webpack_require__(\"./src/ts/main.ts\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}