{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/helpers.ts","webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/interfaces/i-point.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-base.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-polygon.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-sines.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-spiral.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-straight-lines.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":["buildPlotterInfos","backgroundColor","Parameters","invertColors","lineColor","lineThickness","blur","fitImageInPlotter","maxSize","aspectRatio","displayAspectRatio","width","height","sizeInPlotter","Math","floor","offSetX","offSetY","relativeToAbsolute","relativeCoords","x","y","zoomFactor","min","chooseBestSamplingFunction","trueIntensity","inputImage","coords","sqrt","sample","computeNormalRotationFunction","angle","PI","cosAngle","cos","sinAngle","sin","lengthAdjustment","normal","computeWaveFunction","waveSquareness","phase","amplitude","sharpness","sinPhase","sign","pow","abs","choosePattern","imageSizeInPlotter","linesSpacing","chosenPattern","linesPattern","ELinesPattern","STRAIGHT","PatternStraightLines","SPIRAL","PatternSpiral","POLYGON","PatternPolygon","PatternSines","image","this","hiddenCanvas","document","createElement","hiddenContext","getContext","sourceImage","_size","resize","wantedSize","wantedWidth","wantedHeight","console","log","drawImage","fullPixelsArray","getImageData","data","valueArray","Uint8ClampedArray","i","length","r","g","b","normalizedCoords","pixelCoords","floorPixelCoords","fractPixelCoords","topLeft","getPixel","topRight","bottomLeft","bottomRight","top","interpolate","bottom","a","InputImage","distance","dX","dY","rotate","p","plot","plotter","start","Date","now","displayInfos","Helpers","initialize","plotterSize","size","imageFitting","sourceImageAspectRatio","linesCount","maxFrequency","maxAmplitude","pattern","suggestedImageSize","samplingFunction","normalRotation","waveFunction","step","max","iLine","walkOnLine","point","hasStartedALine","endLine","startLine","localDarkness","localHeight","rotatedNormal","absolutePoint","addPointToLine","nbLines","finalize","canvasPlotter","PlotterCanvas2D","plotOnCanvas","updateBlur","onImageLoad","Page","Canvas","showLoader","addRedrawObserver","addBlurChangeObserver","addDownloadObserver","svgPlotter","PlotterSVG","fileName","fileType","svgString","export","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","addFileUploadObserver","defaultImage","Image","addEventListener","src","controlId","redrawObservers","triggerRedraw","observer","udpateLinesControlsVisibility","Tabs","getValues","Controls","setVisibility","SINES","addObserver","Range","addLazyObserver","Checkbox","Observers","canvasResize","push","callback","FileControl","addUploadObserver","filesList","FileReader","onload","result","readAsDataURL","getValue","orientationInDegrees","isChecked","PatternBase","imageSize","_center","_suggestedImageSize","_linesSpacing","_nbSides","linesSides","diagonal","_maxSegments","ceil","_lineId","insideAngle","dSideLength","tan","startSideLength","startPoint","iSide","sideLength","tangentAngle","endPoint","segmentLength","iSubstep","progression","_frequency","linesFrequency","_amplitude","linesAmplitude","_normal","orientationInRadians","_lines","computeLine","maxAbsLine","computeMaximumLinesNeeded","iAbsLine","line","lineId","computePoint","completion","wave","end","maxNbSteps","iStep","lineLength","tangent","center","_radiusGap","nbSemiCircles","_maxAngle","orientation","cosOrientation","sinOrientation","semiCircleId","radius","centerOffset","ELinesOrientation","linesOrientation","DIAGONAL","VERTICAL","HORIZONTAL","xOutOfBounds","yOutOfBounds","computeBestImageSize","maxX","maxY","startAdjustment","endAdjustment","ANGLE_THRESHOLD","_hasStartedALine","startLineInternal","lastDrawnPoint","potentialNextPoint","newPoint","addFirstPointToLineInternal","PlotterBase","computeAngle","addPointToLineInternal","endLineInternal","p1","p2","p3","angle1","atan2","angle2","diffAngle","canvas","getCanvas","context","alpha","cssPixel","devicePixelRatio","infos","resizeCanvas","fillStyle","strokeStyle","lineWidth","fillRect","value","filter","beginPath","rawX","rawY","moveTo","lineTo","stroke","closePath","actualWidth","clientWidth","actualHeight","clientHeight","hasBlur","stringParts","join","toFixed","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { InputImage } from \"./input-image\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\nimport { ISize } from \"./interfaces/i-size\";\r\nimport { Parameters, ELinesPattern } from \"./parameters\";\r\nimport { PatternBase } from \"./pattern/pattern-base\";\r\nimport { PatternStraightLines } from \"./pattern/pattern-straight-lines\";\r\nimport { PatternSines } from \"./pattern/pattern-sines\";\r\nimport { PatternSpiral } from \"./pattern/pattern-spiral\";\r\nimport { IPlotterInfo } from \"./plotter/plotter-base\";\r\nimport { PatternPolygon } from \"./pattern/pattern-polygon\";\r\n\r\nfunction buildPlotterInfos(): IPlotterInfo {\r\n    return {\r\n        backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n        lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n        lineThickness: Parameters.lineThickness,\r\n        blur: Parameters.blur,\r\n    };\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize,\r\n    relativeToAbsolute: (relativeCoords: IPoint) => IPoint;\r\n    zoomFactor: number,\r\n};\r\n\r\nfunction fitImageInPlotter(maxSize: ISize, aspectRatio: number): IImageFitting {\r\n    const displayAspectRatio = maxSize.width / maxSize.height;\r\n\r\n    const sizeInPlotter: ISize = {\r\n        width: maxSize.width,\r\n        height: maxSize.height,\r\n    };\r\n    if (aspectRatio > displayAspectRatio) {\r\n        sizeInPlotter.height = Math.floor(sizeInPlotter.height * displayAspectRatio / aspectRatio);\r\n    } else if (aspectRatio < displayAspectRatio) {\r\n        sizeInPlotter.width = Math.floor(sizeInPlotter.width * aspectRatio / displayAspectRatio);\r\n    }\r\n\r\n    const offSetX = 0.5 * (maxSize.width - sizeInPlotter.width);\r\n    const offSetY = 0.5 * (maxSize.height - sizeInPlotter.height);\r\n    const relativeToAbsolute = (relativeCoords: IPoint): IPoint => {\r\n        return {\r\n            x: relativeCoords.x + offSetX,\r\n            y: relativeCoords.y + offSetY,\r\n        };\r\n    };\r\n\r\n    const minSide = Math.min(sizeInPlotter.width, sizeInPlotter.height);\r\n    const baseMinSide = Math.min(aspectRatio, 1 / aspectRatio);\r\n\r\n    return {\r\n        sizeInPlotter,\r\n        relativeToAbsolute,\r\n        zoomFactor: minSide / baseMinSide,\r\n    };\r\n}\r\n\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\nfunction chooseBestSamplingFunction(): SamplingFunction {\r\n    if (Parameters.trueIntensity) {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(inputImage.sample(coords));\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(1.001 - inputImage.sample(coords));\r\n        }\r\n    } else {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => inputImage.sample(coords);\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => 1 - inputImage.sample(coords);\r\n        }\r\n    }\r\n}\r\n\r\ntype NormalRotationFunction = (normal: IPoint) => IPoint;\r\nfunction computeNormalRotationFunction(): NormalRotationFunction {\r\n    const angle = Parameters.angle * 2 * Math.PI;\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n    const lengthAdjustment = 1 / cosAngle; // to maintain the waves height no matter the angle\r\n    return (normal: IPoint): IPoint => {\r\n        return {\r\n            x: (cosAngle * normal.x - sinAngle * normal.y) * lengthAdjustment,\r\n            y: (sinAngle * normal.x + cosAngle * normal.y) * lengthAdjustment,\r\n        };\r\n    };\r\n}\r\n\r\ntype WaveFunction = (phase: number, amplitude: number) => number;\r\nfunction computeWaveFunction(): WaveFunction {\r\n    if (Parameters.waveSquareness < 0.005) {\r\n        return (phase: number, amplitude: number) => amplitude * Math.sin(phase);\r\n    }\r\n\r\n    const sharpness = 1 - 0.99 * Parameters.waveSquareness;\r\n    return (phase: number, amplitude: number) => {\r\n        const sinPhase = Math.sin(phase);\r\n        return amplitude * Math.sign(sinPhase) * Math.pow(Math.abs(sinPhase), sharpness);\r\n    };\r\n}\r\n\r\nfunction choosePattern(imageSizeInPlotter: ISize, linesSpacing: number): PatternBase {\r\n    const chosenPattern = Parameters.linesPattern;\r\n    if (chosenPattern === ELinesPattern.STRAIGHT) {\r\n        return new PatternStraightLines(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenPattern === ELinesPattern.SPIRAL) {\r\n        return new PatternSpiral(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenPattern === ELinesPattern.POLYGON) {\r\n        return new PatternPolygon(imageSizeInPlotter, linesSpacing);\r\n    } else {\r\n        return new PatternSines(imageSizeInPlotter, linesSpacing);\r\n    }\r\n}\r\n\r\nexport {\r\n    buildPlotterInfos,\r\n    chooseBestSamplingFunction,\r\n    choosePattern,\r\n    computeNormalRotationFunction,\r\n    computeWaveFunction,\r\n    fitImageInPlotter,\r\n};\r\n","import { ISize } from \"./interfaces/i-size\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nclass InputImage {\r\n    private _size: ISize;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.resize({ width: image.width, height: image.height });\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._size.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._size.height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(wantedSize: ISize): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, wantedSize.width);\r\n        const wantedHeight = Math.min(this.sourceImage.height, wantedSize.height);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            console.log(`Resize image from ${this.width}x${this.height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._size.width = wantedWidth;\r\n            this._size.height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1]. Performs linear interpolation. */\r\n    public sample(normalizedCoords: IPoint): number {\r\n        const pixelCoords: IPoint = {\r\n            x: normalizedCoords.x * (this._size.width - 1),\r\n            y: normalizedCoords.y * (this._size.height - 1),\r\n        }\r\n\r\n        const floorPixelCoords: IPoint = {\r\n            x: Math.floor(pixelCoords.x),\r\n            y: Math.floor(pixelCoords.y),\r\n        };\r\n        const fractPixelCoords: IPoint = {\r\n            x: pixelCoords.x - floorPixelCoords.x,\r\n            y: pixelCoords.y - floorPixelCoords.y,\r\n        };\r\n\r\n        const topLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y);\r\n        const topRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y);\r\n        const bottomLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y + 1);\r\n        const bottomRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y + 1);\r\n\r\n        const top = this.interpolate(topLeft, topRight, fractPixelCoords.x);\r\n        const bottom = this.interpolate(bottomLeft, bottomRight, fractPixelCoords.x);\r\n\r\n        const interpolated = this.interpolate(top, bottom, fractPixelCoords.y);\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    private interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 - x) + b * x;\r\n    }\r\n\r\n    /** Returns a value in [0, 255]. No interpolation.\r\n     * @param x in pixels, must be an integer\r\n     * @param y in pixels, must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction distance(a: IPoint, b: IPoint): number {\r\n    const dX = a.x - b.x;\r\n    const dY = a.y - b.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction rotate(p: IPoint, angle: number): IPoint {\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n\r\n    return {\r\n        x: p.x * cosAngle - p.y * sinAngle,\r\n        y: p.x * sinAngle + p.y * cosAngle,\r\n    };\r\n}\r\n\r\nexport { IPoint, distance, rotate }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\n\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(image: InputImage, plotter: PlotterBase): void {\r\n    const start = Date.now();\r\n\r\n    if (image == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    const displayInfos = Helpers.buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    const plotterSize = plotter.size;\r\n    const imageFitting = Helpers.fitImageInPlotter(plotterSize, image.sourceImageAspectRatio);\r\n\r\n    const baseLineSpacing = 1 / Parameters.linesCount;\r\n    const linesSpacing = baseLineSpacing * imageFitting.zoomFactor;\r\n\r\n    const baseMaxFrequency = 500 * Parameters.maxFrequency;\r\n    const maxFrequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n\r\n    const maxAmplitude = 0.5 * (linesSpacing - displayInfos.lineThickness) * Parameters.maxAmplitude;\r\n\r\n    const pattern = Helpers.choosePattern(imageFitting.sizeInPlotter, linesSpacing);\r\n\r\n    image.resize(pattern.suggestedImageSize);\r\n\r\n    const samplingFunction = Helpers.chooseBestSamplingFunction();\r\n    const normalRotation = Helpers.computeNormalRotationFunction();\r\n    const waveFunction = Helpers.computeWaveFunction();\r\n\r\n    const samplesPerPixel = Math.max(1, 2 * maxFrequency);\r\n    const step = 1 / samplesPerPixel;\r\n    for (let iLine = 0; iLine < pattern.nbLines; iLine++) {\r\n        let phase = 0;\r\n        pattern.walkOnLine(iLine, step, (point: IPoint, normal: IPoint) => {\r\n            const normalizedCoords: IPoint = {\r\n                x: point.x / (imageFitting.sizeInPlotter.width - 1),\r\n                y: point.y / (imageFitting.sizeInPlotter.height - 1),\r\n            };\r\n\r\n            const outOfImage = normalizedCoords.x < 0 || normalizedCoords.x > 1 || normalizedCoords.y < 0 || normalizedCoords.y > 1;\r\n            if (outOfImage) {\r\n                if (plotter.hasStartedALine) {\r\n                    plotter.endLine();\r\n                }\r\n                return;\r\n            } else if (!plotter.hasStartedALine) {\r\n                plotter.startLine();\r\n            }\r\n\r\n            const localDarkness = samplingFunction(inputImage, normalizedCoords);\r\n\r\n            const localAmplitude = localDarkness * maxAmplitude;\r\n            const localHeight = waveFunction(phase, localAmplitude);\r\n\r\n            const rotatedNormal = normalRotation(normal);\r\n            const dX = localHeight * rotatedNormal.x;\r\n            const dY = localHeight * rotatedNormal.y;\r\n\r\n            const absolutePoint = imageFitting.relativeToAbsolute(point);\r\n            plotter.addPointToLine(absolutePoint.x + dX, absolutePoint.y + dY);\r\n\r\n            const localFrequency = localDarkness * maxFrequency;\r\n            phase += localFrequency * step;\r\n        });\r\n\r\n        if (plotter.hasStartedALine) {\r\n            plotter.endLine();\r\n        }\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${Date.now() - start} ms.`);\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\n\r\nconst canvasPlotter = new PlotterCanvas2D();\r\nfunction plotOnCanvas(): void {\r\n    plot(inputImage, canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nParameters.addDownloadObserver(() => {\r\n    const svgPlotter = new PlotterSVG();\r\n    plot(inputImage, svgPlotter);\r\n\r\n    const fileName = \"image-as-sines.svg\";\r\n    const fileType = \"text/plain\";\r\n    const svgString = svgPlotter.export();\r\n\r\n    const blob = new Blob([svgString], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    LINES_PATTERN: \"lines-pattern-style-tabs-id\",\r\n    LINES_COUNT: \"lines-count-range-id\",\r\n    ORIENTATION: \"orientation-range-id\",\r\n    LINES_SIDES: \"lines-sides-range-id\",\r\n    LINES_AMPLITUDE: \"lines-amplitude-range-id\",\r\n    LINES_FREQUENCY: \"lines-frequency-range-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    WAVE_SQUARENESS: \"wave-squareness-range-id\",\r\n    LINE_THICKNESS: \"line-thickness-range-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    TRUE_INTENSITY: \"true-intensity-checkbox-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\nenum ELinesPattern {\r\n    STRAIGHT = \"0\",\r\n    SPIRAL = \"1\",\r\n    POLYGON = \"2\",\r\n    SINES = \"3\",\r\n}\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.LINES_PATTERN, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_COUNT, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ORIENTATION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_SIDES, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.WAVE_SQUARENESS, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_THICKNESS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.TRUE_INTENSITY, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nfunction udpateLinesControlsVisibility(): void {\r\n    const pattern = Page.Tabs.getValues(controlId.LINES_PATTERN)[0] as ELinesPattern;\r\n    Page.Controls.setVisibility(controlId.LINES_SIDES, pattern === ELinesPattern.POLYGON);\r\n    Page.Controls.setVisibility(controlId.LINES_AMPLITUDE, pattern === ELinesPattern.SINES);\r\n    Page.Controls.setVisibility(controlId.LINES_FREQUENCY, pattern === ELinesPattern.SINES);\r\n}\r\nPage.Tabs.addObserver(controlId.LINES_PATTERN, udpateLinesControlsVisibility);\r\nudpateLinesControlsVisibility();\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get linesPattern(): ELinesPattern {\r\n        return Page.Tabs.getValues(controlId.LINES_PATTERN)[0] as ELinesPattern;\r\n    }\r\n\r\n    public static get linesCount(): number {\r\n        return Page.Range.getValue(controlId.LINES_COUNT);\r\n    }\r\n\r\n    public static get orientationInDegrees(): number {\r\n        return Page.Range.getValue(controlId.ORIENTATION);\r\n    }\r\n    public static get orientationInRadians(): number {\r\n        return this.orientationInDegrees / 180 * Math.PI;\r\n    }\r\n\r\n    public static get linesSides(): number {\r\n        return Page.Range.getValue(controlId.LINES_SIDES);\r\n    }\r\n\r\n    public static get linesAmplitude(): number {\r\n        return Page.Range.getValue(controlId.LINES_AMPLITUDE);\r\n    }\r\n\r\n    public static get linesFrequency(): number {\r\n        return Page.Range.getValue(controlId.LINES_FREQUENCY);\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get waveSquareness(): number {\r\n        return Page.Range.getValue(controlId.WAVE_SQUARENESS);\r\n    }\r\n\r\n    public static get lineThickness(): number {\r\n        return Page.Range.getValue(controlId.LINE_THICKNESS);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get trueIntensity(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TRUE_INTENSITY);\r\n    }\r\n\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, ELinesPattern }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ntype LineWalker = (point: IPoint, normal: IPoint) => unknown;\r\n\r\nabstract class PatternBase {\r\n    /** Returns the suggested image size for optimum quality */\r\n    public abstract get suggestedImageSize(): ISize;\r\n    public abstract get nbLines(): number;\r\n\r\n    /**\r\n     * @param lineId integer\r\n     * @param step in canvas pixels\r\n     */\r\n    public abstract walkOnLine(lineId: number, step: number, callback: LineWalker): void;\r\n}\r\n\r\nexport { LineWalker, PatternBase }\r\n","import { distance, IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, PatternBase } from \"./pattern-base\";\r\n\r\nclass PatternPolygon extends PatternBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _linesSpacing: number;\r\n    private readonly _maxSegments: number;\r\n    private readonly _nbSides: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._linesSpacing = linesSpacing;\r\n        this._nbSides = Parameters.linesSides;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        this._maxSegments = Math.ceil(this._nbSides * diagonal / linesSpacing);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const insideAngle = Math.PI * (this._nbSides - 2) / this._nbSides; // inside angle of a regular polygon\r\n        const dSideLength = 2 * this._linesSpacing / Math.tan(insideAngle / 2) / this._nbSides;\r\n        const startSideLength = 0.5 * dSideLength;\r\n\r\n        let startPoint: IPoint = {\r\n            x: this._center.x,\r\n            y: this._center.y,\r\n        };\r\n        for (let iSide = 0; iSide < this._maxSegments; iSide++) {\r\n            const sideLength = startSideLength + iSide * dSideLength;\r\n            const tangentAngle = Math.PI + (iSide % this._nbSides) * 2 * Math.PI / this._nbSides;\r\n\r\n            const endPoint: IPoint = {\r\n                x: startPoint.x + sideLength * Math.cos(tangentAngle),\r\n                y: startPoint.y + sideLength * Math.sin(tangentAngle),\r\n            };\r\n\r\n            const normal: IPoint = {\r\n                x: Math.cos(tangentAngle + Math.PI / 2),\r\n                y: Math.sin(tangentAngle + Math.PI / 2),\r\n            };\r\n\r\n            const segmentLength = distance(startPoint, endPoint);\r\n            for (let iSubstep = 0; iSubstep * step < segmentLength; iSubstep++) {\r\n                const currentLength = iSubstep * step;\r\n                const progression = currentLength / segmentLength;\r\n                const point: IPoint = {\r\n                    x: startPoint.x * (1 - progression) + endPoint.x * progression,\r\n                    y: startPoint.y * (1 - progression) + endPoint.y * progression,\r\n                };\r\n                callback(point, normal);\r\n            }\r\n\r\n            startPoint = endPoint;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PatternPolygon };\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LineWalker, PatternBase } from \"./pattern-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nclass PatternSines extends PatternBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n    private readonly _frequency: number;\r\n    private readonly _amplitude: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._frequency = Parameters.linesFrequency;\r\n        this._amplitude = Parameters.linesAmplitude * 0.2 * Math.max(imageSize.width, imageSize.height);\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        this._lines = [];\r\n        this._lines.push(PatternSines.computeLine(0, linesSpacing, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = this.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = PatternSines.computeLine(iLine, linesSpacing, this._normal, imageSize);\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = { width: imageSize.width, height: imageSize.height };\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        const computePoint = (completion: number): IPoint => {\r\n            const wave = this._amplitude * Math.sin(2 * Math.PI * completion * this._frequency);\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion + wave * this._normal.x,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion + wave * this._normal.y,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, normal: IPoint, imageSize: ISize): ILine {\r\n        const lineLength = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const center: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: center.x - 0.5 * lineLength * tangent.x,\r\n            y: center.y - 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        const end: IPoint = {\r\n            x: center.x + 0.5 * lineLength * tangent.x,\r\n            y: center.y + 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: lineLength, // this is not mathematically accurate\r\n        };\r\n    }\r\n\r\n    private computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const width = imageSize.width + 2 * this._amplitude;\r\n        const height = imageSize.height + 2 * this._amplitude;\r\n\r\n        const diagonal = Math.sqrt(width * width + height * height);\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { PatternSines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, PatternBase } from \"./pattern-base\";\r\n\r\nclass PatternSpiral extends PatternBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _radiusGap: number;\r\n    private readonly _maxAngle: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._radiusGap = 0.5 * linesSpacing;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const nbSemiCircles = Math.ceil(diagonal / linesSpacing);\r\n        this._maxAngle = nbSemiCircles * Math.PI;\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const orientation = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientation);\r\n        const sinOrientation = Math.sin(orientation);\r\n\r\n        let angle = 0;\r\n        while (angle < this._maxAngle) {\r\n            const cosAngle = Math.cos(angle);\r\n            const sinAngle = Math.sin(angle);\r\n\r\n            const semiCircleId = Math.ceil((angle - orientation) / Math.PI);\r\n            const radius = (semiCircleId + 0.125) * this._radiusGap;\r\n            const centerOffset = this._radiusGap * (0.5 - (semiCircleId % 2));\r\n\r\n            const point: IPoint = {\r\n                x: this._center.x + centerOffset * cosOrientation + radius * cosAngle,\r\n                y: this._center.y + centerOffset * sinOrientation + radius * sinAngle,\r\n            };\r\n            const normal: IPoint = {\r\n                x: -cosAngle,\r\n                y: -sinAngle,\r\n            };\r\n\r\n            callback(point, normal);\r\n\r\n            angle += step / radius;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PatternSpiral }\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint, distance } from \"../interfaces/i-point\";\r\nimport { LineWalker, PatternBase } from \"./pattern-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nenum ELinesOrientation {\r\n    HORIZONTAL,\r\n    VERTICAL,\r\n    DIAGONAL,\r\n}\r\n\r\nclass PatternStraightLines extends PatternBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        let linesOrientation = ELinesOrientation.DIAGONAL;\r\n        if (Parameters.orientationInDegrees % 180 === 90) {\r\n            linesOrientation = ELinesOrientation.VERTICAL;\r\n        } else if (Parameters.orientationInDegrees % 180 === 0) {\r\n            linesOrientation = ELinesOrientation.HORIZONTAL;\r\n        }\r\n\r\n        this._lines = [];\r\n        this._lines.push(PatternStraightLines.computeLine(0, linesSpacing, linesOrientation, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = PatternStraightLines.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = PatternStraightLines.computeLine(iLine, linesSpacing, linesOrientation, this._normal, imageSize);\r\n\r\n                const ROUNDING_ERROR = 0.1;\r\n\r\n                const xOutOfBounds = line.start.x < -ROUNDING_ERROR || line.start.x > imageSize.width - 1 + ROUNDING_ERROR;\r\n                const yOutOfBounds = line.start.y < -ROUNDING_ERROR || line.start.y > imageSize.height - 1 + ROUNDING_ERROR;\r\n\r\n                if (xOutOfBounds || yOutOfBounds) {\r\n                    break;\r\n                }\r\n\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = PatternStraightLines.computeBestImageSize(imageSize, this._lines.length, linesOrientation);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        function computePoint(completion: number): IPoint {\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, linesOrientation: ELinesOrientation, normal: IPoint, imageSize: ISize): ILine {\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n        const end: IPoint = { x: start.x, y: start.y };\r\n\r\n        const maxX = imageSize.width - 1;\r\n        const maxY = imageSize.height - 1;\r\n\r\n        if (linesOrientation === ELinesOrientation.HORIZONTAL) {\r\n            start.x = 0;\r\n            end.x = maxX;\r\n        } else if (linesOrientation === ELinesOrientation.VERTICAL) {\r\n            start.y = 0;\r\n            end.y = maxY;\r\n        } else {\r\n            const startAdjustment = Math.min(start.x / tangent.x, start.y / tangent.y);\r\n            start.x -= startAdjustment * tangent.x;\r\n            start.y -= startAdjustment * tangent.y;\r\n\r\n            const endAdjustment = Math.min((maxX - end.x) / tangent.x, (maxY - end.y) / tangent.y);\r\n            end.x += endAdjustment * tangent.x;\r\n            end.y += endAdjustment * tangent.y;\r\n        }\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: distance(start, end),\r\n        };\r\n    }\r\n\r\n    private static computeBestImageSize(imageSize: ISize, nbLines: number, orientation: ELinesOrientation): ISize {\r\n        if (orientation === ELinesOrientation.HORIZONTAL) {\r\n            return {\r\n                width: imageSize.width,\r\n                height: nbLines,\r\n            };\r\n        } else if (orientation === ELinesOrientation.VERTICAL) {\r\n            return {\r\n                width: nbLines,\r\n                height: imageSize.height,\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n    }\r\n\r\n    private static computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height)\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { PatternStraightLines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineThickness: number;\r\n    blur: number;\r\n}\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public get hasStartedALine(): boolean {\r\n        return this._hasStartedALine;\r\n    }\r\n\r\n    public startLine(): void {\r\n        this._hasStartedALine = true;\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n        this._hasStartedALine = false;\r\n    }\r\n\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n    private _hasStartedALine: boolean = false;\r\n}\r\n\r\nexport { PlotterBase, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.resizeCanvas();\r\n\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineThickness * this.cssPixel;\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${infos.backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${WIDTH}\" height=\"${HEIGHT}\"/>\\n`);\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineThickness}\" stroke-linejoin=\"round\">\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}