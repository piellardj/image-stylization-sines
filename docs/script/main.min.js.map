{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/helpers.ts","webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/interfaces/i-point.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-base.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-straight-lines.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":["buildPlotterInfos","backgroundColor","Parameters","invertColors","lineColor","lineThickness","blur","fitImageInPlotter","maxSize","aspectRatio","displayAspectRatio","width","height","sizeInPlotter","Math","floor","offSetX","offSetY","relativeToAbsolute","relativeCoords","x","y","zoomFactor","min","chooseBestSamplingFunction","trueIntensity","inputImage","coords","sqrt","sample","computeNormalRotationFunction","angle","PI","cosAngle","cos","sinAngle","sin","lengthAdjustment","normal","computeWaveFunction","waveSquareness","phase","amplitude","sharpness","sinPhase","sign","pow","abs","image","this","hiddenCanvas","document","createElement","hiddenContext","getContext","sourceImage","_size","resize","wantedSize","wantedWidth","wantedHeight","console","log","drawImage","fullPixelsArray","getImageData","data","valueArray","Uint8ClampedArray","i","length","r","g","b","normalizedCoords","pixelCoords","floorPixelCoords","fractPixelCoords","topLeft","getPixel","topRight","bottomLeft","bottomRight","top","interpolate","bottom","a","InputImage","distance","dX","dY","rotate","p","plot","plotter","start","Date","now","displayInfos","Helpers","initialize","plotterSize","size","imageFitting","sourceImageAspectRatio","lineSpacing","linesCount","maxFrequency","maxAmplitude","pattern","PatternStraightLines","suggestedImageSize","samplingFunction","normalRotation","waveFunction","step","iLine","startLine","walkOnLine","point","localDarkness","localHeight","rotatedNormal","absolutePoint","addPointToLine","endLine","nbLines","finalize","canvasPlotter","PlotterCanvas2D","plotOnCanvas","updateBlur","onImageLoad","Page","Canvas","showLoader","addRedrawObserver","addBlurChangeObserver","addDownloadObserver","svgPlotter","PlotterSVG","fileName","fileType","svgString","export","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","addFileUploadObserver","defaultImage","Image","addEventListener","src","controlId","redrawObservers","triggerRedraw","observer","Range","addLazyObserver","Checkbox","addObserver","Observers","canvasResize","push","callback","FileControl","addUploadObserver","filesList","FileReader","onload","result","readAsDataURL","getValue","orientationInDegrees","isChecked","PatternBase","ELinesOrientation","imageSize","linesSpacing","_normal","orientationInRadians","linesOrientation","DIAGONAL","VERTICAL","HORIZONTAL","_lines","computeLine","maxAbsLine","computeMaximumLinesNeeded","iAbsLine","iSide","line","xOutOfBounds","yOutOfBounds","_suggestedImageSize","computeBestImageSize","lineId","computePoint","completion","end","maxNbSteps","iStep","tangent","maxX","maxY","startAdjustment","endAdjustment","orientation","diagonal","ceil","ANGLE_THRESHOLD","startLineInternal","lastDrawnPoint","potentialNextPoint","newPoint","addFirstPointToLineInternal","PlotterBase","computeAngle","addPointToLineInternal","endLineInternal","p1","p2","p3","angle1","atan2","angle2","diffAngle","canvas","getCanvas","context","alpha","cssPixel","devicePixelRatio","infos","resizeCanvas","fillStyle","strokeStyle","lineWidth","fillRect","value","filter","beginPath","rawX","rawY","moveTo","lineTo","stroke","closePath","actualWidth","clientWidth","actualHeight","clientHeight","hasBlur","stringParts","join","toFixed","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { InputImage } from \"./input-image\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\nimport { ISize } from \"./interfaces/i-size\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { IPlotterInfo } from \"./plotter/plotter-base\";\r\n\r\nfunction buildPlotterInfos(): IPlotterInfo {\r\n    return {\r\n        backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n        lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n        lineThickness: Parameters.lineThickness,\r\n        blur: Parameters.blur,\r\n    };\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize,\r\n    relativeToAbsolute: (relativeCoords: IPoint) => IPoint;\r\n    zoomFactor: number,\r\n};\r\n\r\nfunction fitImageInPlotter(maxSize: ISize, aspectRatio: number): IImageFitting {\r\n    const displayAspectRatio = maxSize.width / maxSize.height;\r\n\r\n    const sizeInPlotter: ISize = {\r\n        width: maxSize.width,\r\n        height: maxSize.height,\r\n    };\r\n    if (aspectRatio > displayAspectRatio) {\r\n        sizeInPlotter.height = Math.floor(sizeInPlotter.height * displayAspectRatio / aspectRatio);\r\n    } else if (aspectRatio < displayAspectRatio) {\r\n        sizeInPlotter.width = Math.floor(sizeInPlotter.width * aspectRatio / displayAspectRatio);\r\n    }\r\n\r\n    const offSetX = 0.5 * (maxSize.width - sizeInPlotter.width);\r\n    const offSetY = 0.5 * (maxSize.height - sizeInPlotter.height);\r\n    const relativeToAbsolute = (relativeCoords: IPoint): IPoint => {\r\n        return {\r\n            x: relativeCoords.x + offSetX,\r\n            y: relativeCoords.y + offSetY,\r\n        };\r\n    };\r\n\r\n    const minSide = Math.min(sizeInPlotter.width, sizeInPlotter.height);\r\n    const baseMinSide = Math.min(aspectRatio, 1 / aspectRatio);\r\n\r\n    return {\r\n        sizeInPlotter,\r\n        relativeToAbsolute,\r\n        zoomFactor: minSide / baseMinSide,\r\n    };\r\n}\r\n\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\nfunction chooseBestSamplingFunction(): SamplingFunction {\r\n    if (Parameters.trueIntensity) {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(inputImage.sample(coords));\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => Math.sqrt(1.001 - inputImage.sample(coords));\r\n        }\r\n    } else {\r\n        if (Parameters.invertColors) {\r\n            return (inputImage: InputImage, coords: IPoint) => inputImage.sample(coords);\r\n        } else {\r\n            return (inputImage: InputImage, coords: IPoint) => 1 - inputImage.sample(coords);\r\n        }\r\n    }\r\n}\r\n\r\ntype NormalRotationFunction = (normal: IPoint) => IPoint;\r\nfunction computeNormalRotationFunction(): NormalRotationFunction {\r\n    const angle = Parameters.angle * 2 * Math.PI;\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n    const lengthAdjustment = 1 / cosAngle; // to maintain the waves height no matter the angle\r\n    return (normal: IPoint): IPoint => {\r\n        return {\r\n            x: (cosAngle * normal.x - sinAngle * normal.y) * lengthAdjustment,\r\n            y: (sinAngle * normal.x + cosAngle * normal.y) * lengthAdjustment,\r\n        };\r\n    };\r\n}\r\n\r\ntype WaveFunction = (phase: number, amplitude: number) => number;\r\nfunction computeWaveFunction(): WaveFunction {\r\n    if (Parameters.waveSquareness < 0.005) {\r\n        return (phase: number, amplitude: number) => amplitude * Math.sin(phase);\r\n    }\r\n\r\n    const sharpness = 1 - 0.99 * Parameters.waveSquareness;\r\n    return (phase: number, amplitude: number) => {\r\n        const sinPhase = Math.sin(phase);\r\n        return amplitude * Math.sign(sinPhase) * Math.pow(Math.abs(sinPhase), sharpness);\r\n    };\r\n}\r\n\r\nexport {\r\n    buildPlotterInfos,\r\n    chooseBestSamplingFunction,\r\n    computeNormalRotationFunction,\r\n    computeWaveFunction,\r\n    fitImageInPlotter,\r\n};\r\n","import { ISize } from \"./interfaces/i-size\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nclass InputImage {\r\n    private _size: ISize;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.resize({ width: image.width, height: image.height });\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._size.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._size.height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(wantedSize: ISize): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, wantedSize.width);\r\n        const wantedHeight = Math.min(this.sourceImage.height, wantedSize.height);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            console.log(`Resize image from ${this.width}x${this.height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._size.width = wantedWidth;\r\n            this._size.height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1]. Performs linear interpolation. */\r\n    public sample(normalizedCoords: IPoint): number {\r\n        const pixelCoords: IPoint = {\r\n            x: normalizedCoords.x * (this._size.width - 1),\r\n            y: normalizedCoords.y * (this._size.height - 1),\r\n        }\r\n\r\n        const floorPixelCoords: IPoint = {\r\n            x: Math.floor(pixelCoords.x),\r\n            y: Math.floor(pixelCoords.y),\r\n        };\r\n        const fractPixelCoords: IPoint = {\r\n            x: pixelCoords.x - floorPixelCoords.x,\r\n            y: pixelCoords.y - floorPixelCoords.y,\r\n        };\r\n\r\n        const topLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y);\r\n        const topRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y);\r\n        const bottomLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y + 1);\r\n        const bottomRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y + 1);\r\n\r\n        const top = this.interpolate(topLeft, topRight, fractPixelCoords.x);\r\n        const bottom = this.interpolate(bottomLeft, bottomRight, fractPixelCoords.x);\r\n\r\n        const interpolated = this.interpolate(top, bottom, fractPixelCoords.y);\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    private interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 - x) + b * x;\r\n    }\r\n\r\n    /** Returns a value in [0, 255]. No interpolation.\r\n     * @param x in pixels, must be an integer\r\n     * @param y in pixels, must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction distance(a: IPoint, b: IPoint): number {\r\n    const dX = a.x - b.x;\r\n    const dY = a.y - b.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction rotate(p: IPoint, angle: number): IPoint {\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n\r\n    return {\r\n        x: p.x * cosAngle - p.y * sinAngle,\r\n        y: p.x * sinAngle + p.y * cosAngle,\r\n    };\r\n}\r\n\r\nexport { IPoint, distance, rotate }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\n\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport { PatternBase } from \"./pattern/pattern-base\";\r\nimport { PatternStraightLines } from \"./pattern/pattern-straight-lines\";\r\n\r\nimport * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(image: InputImage, plotter: PlotterBase): void {\r\n    const start = Date.now();\r\n\r\n    if (image == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    const displayInfos = Helpers.buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    const plotterSize = plotter.size;\r\n    const imageFitting = Helpers.fitImageInPlotter(plotterSize, image.sourceImageAspectRatio);\r\n\r\n    const baseLineSpacing = 1 / Parameters.linesCount;\r\n    const lineSpacing = baseLineSpacing * imageFitting.zoomFactor;\r\n\r\n    const baseMaxFrequency = 500 * Parameters.maxFrequency;\r\n    const maxFrequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n\r\n    const maxAmplitude = 0.5 * (lineSpacing - displayInfos.lineThickness) * Parameters.maxAmplitude;\r\n\r\n    const pattern: PatternBase = new PatternStraightLines(imageFitting.sizeInPlotter, lineSpacing);\r\n    image.resize(pattern.suggestedImageSize);\r\n\r\n    const samplingFunction = Helpers.chooseBestSamplingFunction();\r\n    const normalRotation = Helpers.computeNormalRotationFunction();\r\n    const waveFunction = Helpers.computeWaveFunction();\r\n\r\n    const step = Math.min(1, 1 / (2 * maxFrequency));\r\n    for (let iLine = 0; iLine < pattern.nbLines; iLine++) {\r\n        plotter.startLine();\r\n\r\n        let phase = 0;\r\n        pattern.walkOnLine(iLine, step, (point: IPoint, normal: IPoint) => {\r\n            const normalizedCoords: IPoint = {\r\n                x: point.x / (imageFitting.sizeInPlotter.width - 1),\r\n                y: point.y / (imageFitting.sizeInPlotter.height - 1),\r\n            };\r\n\r\n            const localDarkness = samplingFunction(inputImage, normalizedCoords);\r\n\r\n            const localAmplitude = localDarkness * maxAmplitude;\r\n            const localHeight = waveFunction(phase, localAmplitude);\r\n\r\n            const rotatedNormal = normalRotation(normal);\r\n            const dX = localHeight * rotatedNormal.x;\r\n            const dY = localHeight * rotatedNormal.y;\r\n\r\n            const absolutePoint = imageFitting.relativeToAbsolute(point);\r\n            plotter.addPointToLine(absolutePoint.x + dX, absolutePoint.y + dY);\r\n\r\n            const localFrequency = localDarkness * maxFrequency;\r\n            phase += localFrequency * step;\r\n        });\r\n\r\n        plotter.endLine();\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${Date.now() - start} ms.`);\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\n\r\nconst canvasPlotter = new PlotterCanvas2D();\r\nfunction plotOnCanvas(): void {\r\n    plot(inputImage, canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nParameters.addDownloadObserver(() => {\r\n    const svgPlotter = new PlotterSVG();\r\n    plot(inputImage, svgPlotter);\r\n\r\n    const fileName = \"image-as-sines.svg\";\r\n    const fileType = \"text/plain\";\r\n    const svgString = svgPlotter.export();\r\n\r\n    const blob = new Blob([svgString], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    LINES_COUNT: \"lines-count-range-id\",\r\n    ORIENTATION: \"orientation-range-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    WAVE_SQUARENESS: \"wave-squareness-range-id\",\r\n    LINE_THICKNESS: \"line-thickness-range-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    TRUE_INTENSITY: \"true-intensity-checkbox-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Range.addLazyObserver(controlId.LINES_COUNT, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ORIENTATION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.WAVE_SQUARENESS, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_THICKNESS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.TRUE_INTENSITY, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get linesCount(): number {\r\n        return Page.Range.getValue(controlId.LINES_COUNT);\r\n    }\r\n\r\n    public static get orientationInDegrees(): number {\r\n        return Page.Range.getValue(controlId.ORIENTATION);\r\n    }\r\n    public static get orientationInRadians(): number {\r\n        return this.orientationInDegrees / 180 * Math.PI;\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get waveSquareness(): number {\r\n        return Page.Range.getValue(controlId.WAVE_SQUARENESS);\r\n    }\r\n\r\n    public static get lineThickness(): number {\r\n        return Page.Range.getValue(controlId.LINE_THICKNESS);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get trueIntensity(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TRUE_INTENSITY);\r\n    }\r\n\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ntype LineWalker = (point: IPoint, normal: IPoint) => unknown;\r\n\r\nabstract class PatternBase {\r\n    /** Returns the suggested image size for optimum quality */\r\n    public abstract get suggestedImageSize(): ISize;\r\n    public abstract get nbLines(): number;\r\n\r\n    public abstract walkOnLine(lineId: number, step: number, callback: LineWalker): void;\r\n}\r\n\r\nexport { LineWalker, PatternBase }\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint, distance } from \"../interfaces/i-point\";\r\nimport { LineWalker, PatternBase } from \"./pattern-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nenum ELinesOrientation {\r\n    HORIZONTAL,\r\n    VERTICAL,\r\n    DIAGONAL,\r\n}\r\n\r\nclass PatternStraightLines extends PatternBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        let linesOrientation = ELinesOrientation.DIAGONAL;\r\n        if (Parameters.orientationInDegrees % 180 === 90) {\r\n            linesOrientation = ELinesOrientation.VERTICAL;\r\n        } else if (Parameters.orientationInDegrees % 180 === 0) {\r\n            linesOrientation = ELinesOrientation.HORIZONTAL;\r\n        }\r\n\r\n        this._lines = [];\r\n        this._lines.push(PatternStraightLines.computeLine(0, linesSpacing, linesOrientation, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = PatternStraightLines.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = PatternStraightLines.computeLine(iLine, linesSpacing, linesOrientation, this._normal, imageSize);\r\n\r\n                const ROUNDING_ERROR = 0.1;\r\n\r\n                const xOutOfBounds = line.start.x < -ROUNDING_ERROR || line.start.x > imageSize.width - 1 + ROUNDING_ERROR;\r\n                const yOutOfBounds = line.start.y < -ROUNDING_ERROR || line.start.y > imageSize.height - 1 + ROUNDING_ERROR;\r\n\r\n                if (xOutOfBounds || yOutOfBounds) {\r\n                    break;\r\n                }\r\n\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = PatternStraightLines.computeBestImageSize(imageSize, this._lines.length, linesOrientation);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    /**\r\n     * @param lineId integer\r\n     * @param step in canvas pixels\r\n     */\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        function computePoint(completion: number): IPoint {\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, linesOrientation: ELinesOrientation, normal: IPoint, imageSize: ISize): ILine {\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n        const end: IPoint = { x: start.x, y: start.y };\r\n\r\n        const maxX = imageSize.width - 1;\r\n        const maxY = imageSize.height - 1;\r\n\r\n        if (linesOrientation === ELinesOrientation.HORIZONTAL) {\r\n            start.x = 0;\r\n            end.x = maxX;\r\n        } else if (linesOrientation === ELinesOrientation.VERTICAL) {\r\n            start.y = 0;\r\n            end.y = maxY;\r\n        } else {\r\n            const startAdjustment = Math.min(start.x / tangent.x, start.y / tangent.y);\r\n            start.x -= startAdjustment * tangent.x;\r\n            start.y -= startAdjustment * tangent.y;\r\n\r\n            const endAdjustment = Math.min((maxX - end.x) / tangent.x, (maxY - end.y) / tangent.y);\r\n            end.x += endAdjustment * tangent.x;\r\n            end.y += endAdjustment * tangent.y;\r\n        }\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: distance(start, end),\r\n        };\r\n    }\r\n\r\n    private static computeBestImageSize(imageSize: ISize, nbLines: number, orientation: ELinesOrientation): ISize {\r\n        if (orientation === ELinesOrientation.HORIZONTAL) {\r\n            return {\r\n                width: imageSize.width,\r\n                height: nbLines,\r\n            };\r\n        } else if (orientation === ELinesOrientation.VERTICAL) {\r\n            return {\r\n                width: nbLines,\r\n                height: imageSize.height,\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n    }\r\n\r\n    private static computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height)\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { PatternStraightLines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineThickness: number;\r\n    blur: number;\r\n}\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public startLine(): void {\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n    }\r\n\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n}\r\n\r\nexport { PlotterBase, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.resizeCanvas();\r\n\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineThickness * this.cssPixel;\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${infos.backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${WIDTH}\" height=\"${HEIGHT}\"/>\\n`);\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineThickness}\" stroke-linejoin=\"round\">\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}