{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/helpers.ts","webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/interfaces/i-point.ts","webpack://image-stylization-sines/./src/ts/lines/lines-base.ts","webpack://image-stylization-sines/./src/ts/lines/lines-polygon.ts","webpack://image-stylization-sines/./src/ts/lines/lines-sines.ts","webpack://image-stylization-sines/./src/ts/lines/lines-spiral.ts","webpack://image-stylization-sines/./src/ts/lines/lines-straight-lines.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-base.ts","webpack://image-stylization-sines/./src/ts/pattern/pattern-wave.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":["buildPlotterInfos","backgroundColor","Parameters","invertColors","lineColor","lineThickness","blur","chooseLines","imageSizeInPlotter","linesSpacing","chosenType","linesType","ELinesType","STRAIGHT","LinesStraightLines","SPIRAL","LinesSpiral","POLYGON","LinesPolygon","LinesSines","choosePattern","imageFitting","PatternWave","downloadTextFile","content","filename","fileType","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","image","this","hiddenCanvas","hiddenContext","getContext","sourceImage","_size","width","height","resize","wantedSize","wantedWidth","Math","min","wantedHeight","console","log","drawImage","fullPixelsArray","getImageData","data","valueArray","Uint8ClampedArray","i","length","r","g","b","sample","normalizedCoords","pixelCoords","x","y","floorPixelCoords","floor","fractPixelCoords","topLeft","getPixel","topRight","bottomLeft","bottomRight","top","interpolate","bottom","a","InputImage","distance","dX","dY","sqrt","rotate","p","angle","cosAngle","cos","sinAngle","sin","LinesBase","imageSize","_center","_suggestedImageSize","_linesSpacing","_nbSides","linesSides","diagonal","_maxSegments","ceil","walkOnLine","_lineId","step","callback","insideAngle","PI","dSideLength","tan","startSideLength","orientationAngle","orientationInRadians","cosOrientation","sinOrientation","startPoint","iSide","sideLength","tangentAngle","endPoint","normalAngle","normal","segmentLength","iSubstep","progression","rawPointX","rawPointY","_frequency","linesFrequency","_amplitude","linesAmplitude","max","_normal","_lines","push","computeLine","maxAbsLine","computeMaximumLinesNeeded","iAbsLine","iLine","line","lineId","computePoint","completion","wave","start","end","maxNbSteps","iStep","lineLength","tangent","center","_radiusGap","nbSemiCircles","_maxAngle","orientation","semiCircleId","radius","centerOffset","ELinesOrientation","linesOrientation","DIAGONAL","orientationInDegrees","VERTICAL","HORIZONTAL","xOutOfBounds","yOutOfBounds","computeBestImageSize","maxX","maxY","startAdjustment","endAdjustment","nbLines","plot","plotter","performance","now","displayInfos","Helpers","initialize","fitImage","sourceImageAspectRatio","linesCount","zoomFactor","lines","sizeInPlotter","pattern","suggestedImageSize","drawLine","finalize","inputImage","canvasPlotter","PlotterCanvas2D","plotOnCanvas","updateBlur","onImageLoad","Page","Canvas","showLoader","addRedrawObserver","addBlurChangeObserver","addDownloadObserver","svgPlotter","PlotterSVG","svgString","export","addFileUploadObserver","defaultImage","Image","addEventListener","src","controlId","redrawObservers","triggerRedraw","observer","udpateLinesControlsVisibility","Tabs","getValues","Controls","setVisibility","SINES","addObserver","Range","addLazyObserver","Checkbox","Observers","canvasResize","FileControl","addUploadObserver","filesList","FileReader","onload","result","readAsDataURL","getValue","isChecked","PatternBase","waveFunction","computeWaveFunction","normalRotationFunction","computeNormalRotationFunction","samplingFunction","chooseBestSamplingFunction","baseMaxFrequency","maxFrequency","maxAmplitude","samplesPerPixel","phase","point","pixelToRelative","hasStartedALine","endLine","localDarkness","localAmplitude","localHeight","rotatedNormal","absolutePoint","relativeToAbsolute","startLine","addPointToLine","localFrequency","lengthAdjustment","waveSquareness","amplitude","sharpness","sinPhase","sign","pow","abs","trueIntensity","coords","ANGLE_THRESHOLD","_hasStartedALine","startLineInternal","lastDrawnPoint","potentialNextPoint","newPoint","addFirstPointToLineInternal","PlotterBase","computeAngle","addPointToLineInternal","endLineInternal","imageAspectRatio","plotterSize","size","displayAspectRatio","offSetX","offSetY","minSide","baseMinSide","relativeCoords","pixelCoordinates","p1","p2","p3","angle1","atan2","angle2","diffAngle","canvas","getCanvas","context","alpha","cssPixel","devicePixelRatio","infos","resizeCanvas","fillStyle","strokeStyle","lineWidth","lineJoin","lineCap","roundLinecap","fillRect","value","filter","beginPath","rawX","rawY","moveTo","lineTo","stroke","closePath","actualWidth","clientWidth","actualHeight","clientHeight","hasBlur","stringParts","linecap","Date","join","toFixed","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { ISize } from \"./interfaces/i-size\";\r\nimport { Parameters, ELinesType } from \"./parameters\";\r\nimport { LinesBase } from \"./lines/lines-base\";\r\nimport { LinesStraightLines } from \"./lines/lines-straight-lines\";\r\nimport { LinesSines } from \"./lines/lines-sines\";\r\nimport { LinesSpiral } from \"./lines/lines-spiral\";\r\nimport { IPlotterInfo, IImageFitting } from \"./plotter/plotter-base\";\r\nimport { LinesPolygon } from \"./lines/lines-polygon\";\r\nimport { PatternWave } from \"./pattern/pattern-wave\";\r\nimport { PatternBase } from \"./pattern/pattern-base\";\r\n\r\nfunction buildPlotterInfos(): IPlotterInfo {\r\n    return {\r\n        backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n        lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n        lineThickness: Parameters.lineThickness,\r\n        blur: Parameters.blur,\r\n    };\r\n}\r\n\r\nfunction chooseLines(imageSizeInPlotter: ISize, linesSpacing: number): LinesBase {\r\n    const chosenType = Parameters.linesType;\r\n    if (chosenType === ELinesType.STRAIGHT) {\r\n        return new LinesStraightLines(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.SPIRAL) {\r\n        return new LinesSpiral(imageSizeInPlotter, linesSpacing);\r\n    } else if (chosenType === ELinesType.POLYGON) {\r\n        return new LinesPolygon(imageSizeInPlotter, linesSpacing);\r\n    } else {\r\n        return new LinesSines(imageSizeInPlotter, linesSpacing);\r\n    }\r\n}\r\n\r\nfunction choosePattern(imageFitting: IImageFitting, linesSpacing: number): PatternBase {\r\n    return new PatternWave(imageFitting, linesSpacing);\r\n}\r\n\r\nfunction downloadTextFile(content: string, filename: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, filename);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = filename;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nexport {\r\n    buildPlotterInfos,\r\n    chooseLines,\r\n    choosePattern,\r\n    downloadTextFile,\r\n};\r\n","import { ISize } from \"./interfaces/i-size\";\r\nimport { IPoint } from \"./interfaces/i-point\";\r\n\r\nclass InputImage {\r\n    private _size: ISize;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._size = {\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n\r\n        this.resize({ width: image.width, height: image.height });\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._size.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._size.height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(wantedSize: ISize): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, wantedSize.width);\r\n        const wantedHeight = Math.min(this.sourceImage.height, wantedSize.height);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            console.log(`Resize image from ${this.width}x${this.height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._size.width = wantedWidth;\r\n            this._size.height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1]. Performs linear interpolation. */\r\n    public sample(normalizedCoords: IPoint): number {\r\n        const pixelCoords: IPoint = {\r\n            x: normalizedCoords.x * (this._size.width - 1),\r\n            y: normalizedCoords.y * (this._size.height - 1),\r\n        }\r\n\r\n        const floorPixelCoords: IPoint = {\r\n            x: Math.floor(pixelCoords.x),\r\n            y: Math.floor(pixelCoords.y),\r\n        };\r\n        const fractPixelCoords: IPoint = {\r\n            x: pixelCoords.x - floorPixelCoords.x,\r\n            y: pixelCoords.y - floorPixelCoords.y,\r\n        };\r\n\r\n        const topLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y);\r\n        const topRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y);\r\n        const bottomLeft = this.getPixel(floorPixelCoords.x, floorPixelCoords.y + 1);\r\n        const bottomRight = this.getPixel(floorPixelCoords.x + 1, floorPixelCoords.y + 1);\r\n\r\n        const top = this.interpolate(topLeft, topRight, fractPixelCoords.x);\r\n        const bottom = this.interpolate(bottomLeft, bottomRight, fractPixelCoords.x);\r\n\r\n        const interpolated = this.interpolate(top, bottom, fractPixelCoords.y);\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    private interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 - x) + b * x;\r\n    }\r\n\r\n    /** Returns a value in [0, 255]. No interpolation.\r\n     * @param x in pixels, must be an integer\r\n     * @param y in pixels, must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nfunction distance(a: IPoint, b: IPoint): number {\r\n    const dX = a.x - b.x;\r\n    const dY = a.y - b.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction rotate(p: IPoint, angle: number): IPoint {\r\n    const cosAngle = Math.cos(angle);\r\n    const sinAngle = Math.sin(angle);\r\n\r\n    return {\r\n        x: p.x * cosAngle - p.y * sinAngle,\r\n        y: p.x * sinAngle + p.y * cosAngle,\r\n    };\r\n}\r\n\r\nexport { IPoint, distance, rotate }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ntype LineWalker = (point: IPoint, normal: IPoint) => unknown;\r\n\r\nabstract class LinesBase {\r\n    /** Returns the suggested image size for optimum quality */\r\n    public abstract get suggestedImageSize(): ISize;\r\n    public abstract get nbLines(): number;\r\n\r\n    /**\r\n     * @param lineId integer\r\n     * @param step in canvas pixels\r\n     */\r\n    public abstract walkOnLine(lineId: number, step: number, callback: LineWalker): void;\r\n}\r\n\r\nexport { LineWalker, LinesBase }\r\n","import { distance, IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesPolygon extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _linesSpacing: number;\r\n    private readonly _maxSegments: number;\r\n    private readonly _nbSides: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._linesSpacing = linesSpacing;\r\n        this._nbSides = Parameters.linesSides;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        this._maxSegments = Math.ceil(this._nbSides * diagonal / linesSpacing);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const insideAngle = Math.PI * (this._nbSides - 2) / this._nbSides; // inside angle of a regular polygon\r\n        const dSideLength = 2 * this._linesSpacing / Math.tan(insideAngle / 2) / this._nbSides;\r\n        const startSideLength = 0.5 * dSideLength;\r\n\r\n        const orientationAngle = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientationAngle);\r\n        const sinOrientation = Math.sin(orientationAngle);\r\n\r\n        let startPoint: IPoint = {\r\n            x: this._center.x,\r\n            y: this._center.y,\r\n        };\r\n        for (let iSide = 0; iSide < this._maxSegments; iSide++) {\r\n            const sideLength = startSideLength + iSide * dSideLength;\r\n            const tangentAngle = Math.PI + (iSide % this._nbSides) * 2 * Math.PI / this._nbSides;\r\n\r\n            const endPoint: IPoint = {\r\n                x: startPoint.x + sideLength * Math.cos(tangentAngle),\r\n                y: startPoint.y + sideLength * Math.sin(tangentAngle),\r\n            };\r\n\r\n            const normalAngle = tangentAngle + orientationAngle + Math.PI / 2;\r\n            const normal: IPoint = { x: Math.cos(normalAngle), y: Math.sin(normalAngle) };\r\n\r\n            const segmentLength = distance(startPoint, endPoint);\r\n            for (let iSubstep = 0; iSubstep * step < segmentLength; iSubstep++) {\r\n                const currentLength = iSubstep * step;\r\n                const progression = currentLength / segmentLength;\r\n\r\n                const rawPointX = startPoint.x * (1 - progression) + endPoint.x * progression - this._center.x;\r\n                const rawPointY = startPoint.y * (1 - progression) + endPoint.y * progression - this._center.y;\r\n\r\n                const point: IPoint = {\r\n                    x: cosOrientation * rawPointX - sinOrientation * rawPointY + this._center.x,\r\n                    y: sinOrientation * rawPointX + cosOrientation * rawPointY + this._center.y,\r\n                };\r\n                callback(point, normal);\r\n            }\r\n\r\n            startPoint = endPoint;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesPolygon };\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nclass LinesSines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n    private readonly _frequency: number;\r\n    private readonly _amplitude: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._frequency = Parameters.linesFrequency;\r\n        this._amplitude = Parameters.linesAmplitude * 0.2 * Math.max(imageSize.width, imageSize.height);\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesSines.computeLine(0, linesSpacing, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = this.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesSines.computeLine(iLine, linesSpacing, this._normal, imageSize);\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = { width: imageSize.width, height: imageSize.height };\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        const computePoint = (completion: number): IPoint => {\r\n            const wave = this._amplitude * Math.sin(2 * Math.PI * completion * this._frequency);\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion + wave * this._normal.x,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion + wave * this._normal.y,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, normal: IPoint, imageSize: ISize): ILine {\r\n        const lineLength = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const center: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: center.x - 0.5 * lineLength * tangent.x,\r\n            y: center.y - 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        const end: IPoint = {\r\n            x: center.x + 0.5 * lineLength * tangent.x,\r\n            y: center.y + 0.5 * lineLength * tangent.y,\r\n        };\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: lineLength, // this is not mathematically accurate\r\n        };\r\n    }\r\n\r\n    private computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const width = imageSize.width + 2 * this._amplitude;\r\n        const height = imageSize.height + 2 * this._amplitude;\r\n\r\n        const diagonal = Math.sqrt(width * width + height * height);\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesSines }\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nclass LinesSpiral extends LinesBase {\r\n    private readonly _center: IPoint;\r\n    private readonly _suggestedImageSize: ISize;\r\n    private readonly _radiusGap: number;\r\n    private readonly _maxAngle: number;\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._center = {\r\n            x: 0.5 * imageSize.width,\r\n            y: 0.5 * imageSize.height,\r\n        };\r\n\r\n        this._suggestedImageSize = {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n\r\n        this._radiusGap = 0.5 * linesSpacing;\r\n\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height);\r\n        const nbSemiCircles = Math.ceil(diagonal / linesSpacing);\r\n        this._maxAngle = nbSemiCircles * Math.PI;\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return 1;\r\n    }\r\n\r\n    public walkOnLine(_lineId: number, step: number, callback: LineWalker): void {\r\n        const orientation = Parameters.orientationInRadians;\r\n        const cosOrientation = Math.cos(orientation);\r\n        const sinOrientation = Math.sin(orientation);\r\n\r\n        let angle = 0;\r\n        while (angle < this._maxAngle) {\r\n            const cosAngle = Math.cos(angle);\r\n            const sinAngle = Math.sin(angle);\r\n\r\n            const semiCircleId = Math.ceil((angle - orientation) / Math.PI);\r\n            const radius = (semiCircleId + 0.125) * this._radiusGap;\r\n            const centerOffset = this._radiusGap * (0.5 - (semiCircleId % 2));\r\n\r\n            const point: IPoint = {\r\n                x: this._center.x + centerOffset * cosOrientation + radius * cosAngle,\r\n                y: this._center.y + centerOffset * sinOrientation + radius * sinAngle,\r\n            };\r\n            const normal: IPoint = {\r\n                x: -cosAngle,\r\n                y: -sinAngle,\r\n            };\r\n\r\n            callback(point, normal);\r\n\r\n            angle += step / radius;\r\n        }\r\n    }\r\n}\r\n\r\nexport { LinesSpiral }\r\n","import { ISize } from \"../interfaces/i-size\";\r\nimport { IPoint, distance } from \"../interfaces/i-point\";\r\nimport { LineWalker, LinesBase } from \"./lines-base\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\ninterface ILine {\r\n    start: IPoint;\r\n    end: IPoint;\r\n    length: number;\r\n}\r\n\r\nenum ELinesOrientation {\r\n    HORIZONTAL,\r\n    VERTICAL,\r\n    DIAGONAL,\r\n}\r\n\r\nclass LinesStraightLines extends LinesBase {\r\n    private readonly _suggestedImageSize: ISize;\r\n\r\n    private readonly _normal: IPoint;\r\n    private readonly _lines: ILine[];\r\n\r\n    public constructor(imageSize: ISize, linesSpacing: number) {\r\n        super();\r\n\r\n        this._normal = {\r\n            x: -Math.sin(Parameters.orientationInRadians),\r\n            y: Math.cos(Parameters.orientationInRadians),\r\n        };\r\n\r\n        let linesOrientation = ELinesOrientation.DIAGONAL;\r\n        if (Parameters.orientationInDegrees % 180 === 90) {\r\n            linesOrientation = ELinesOrientation.VERTICAL;\r\n        } else if (Parameters.orientationInDegrees % 180 === 0) {\r\n            linesOrientation = ELinesOrientation.HORIZONTAL;\r\n        }\r\n\r\n        this._lines = [];\r\n        this._lines.push(LinesStraightLines.computeLine(0, linesSpacing, linesOrientation, this._normal, imageSize));\r\n\r\n        const maximumLinesNeeded = LinesStraightLines.computeMaximumLinesNeeded(imageSize, linesSpacing);\r\n        const maxAbsLine = maximumLinesNeeded / 2 + 1;\r\n        for (let iAbsLine = 1; iAbsLine < maxAbsLine; iAbsLine++) {\r\n            for (let iSide = -1; iSide <= 2; iSide += 2) {\r\n                const iLine = iAbsLine * iSide;\r\n                const line = LinesStraightLines.computeLine(iLine, linesSpacing, linesOrientation, this._normal, imageSize);\r\n\r\n                const ROUNDING_ERROR = 0.1;\r\n\r\n                const xOutOfBounds = line.start.x < -ROUNDING_ERROR || line.start.x > imageSize.width - 1 + ROUNDING_ERROR;\r\n                const yOutOfBounds = line.start.y < -ROUNDING_ERROR || line.start.y > imageSize.height - 1 + ROUNDING_ERROR;\r\n\r\n                if (xOutOfBounds || yOutOfBounds) {\r\n                    break;\r\n                }\r\n\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n        this._suggestedImageSize = LinesStraightLines.computeBestImageSize(imageSize, this._lines.length, linesOrientation);\r\n    }\r\n\r\n    public get suggestedImageSize(): ISize {\r\n        return this._suggestedImageSize;\r\n    }\r\n\r\n    public get nbLines(): number {\r\n        return this._lines.length;\r\n    }\r\n\r\n    public walkOnLine(lineId: number, step: number, callback: LineWalker): void {\r\n        const line = this._lines[lineId];\r\n\r\n        function computePoint(completion: number): IPoint {\r\n            return {\r\n                x: line.start.x * (1 - completion) + line.end.x * completion,\r\n                y: line.start.y * (1 - completion) + line.end.y * completion,\r\n            };\r\n        }\r\n\r\n        const maxNbSteps = line.length / step;\r\n        for (let iStep = 0; iStep < maxNbSteps; iStep++) {\r\n            const completion = (iStep * step) / line.length;\r\n\r\n            const point = computePoint(completion);\r\n            callback(point, this._normal);\r\n        }\r\n\r\n        const lastPoint = computePoint(1);\r\n        callback(lastPoint, this._normal);\r\n    }\r\n\r\n    private static computeLine(iLine: number, linesSpacing: number, linesOrientation: ELinesOrientation, normal: IPoint, imageSize: ISize): ILine {\r\n        const tangent: IPoint = {\r\n            x: normal.y,\r\n            y: -normal.x,\r\n        };\r\n\r\n        const start: IPoint = {\r\n            x: 0.5 * imageSize.width + iLine * linesSpacing * normal.x,\r\n            y: 0.5 * imageSize.height + iLine * linesSpacing * normal.y,\r\n        };\r\n        const end: IPoint = { x: start.x, y: start.y };\r\n\r\n        const maxX = imageSize.width - 1;\r\n        const maxY = imageSize.height - 1;\r\n\r\n        if (linesOrientation === ELinesOrientation.HORIZONTAL) {\r\n            start.x = 0;\r\n            end.x = maxX;\r\n        } else if (linesOrientation === ELinesOrientation.VERTICAL) {\r\n            start.y = 0;\r\n            end.y = maxY;\r\n        } else {\r\n            const startAdjustment = Math.min(start.x / tangent.x, start.y / tangent.y);\r\n            start.x -= startAdjustment * tangent.x;\r\n            start.y -= startAdjustment * tangent.y;\r\n\r\n            const endAdjustment = Math.min((maxX - end.x) / tangent.x, (maxY - end.y) / tangent.y);\r\n            end.x += endAdjustment * tangent.x;\r\n            end.y += endAdjustment * tangent.y;\r\n        }\r\n\r\n        return {\r\n            start,\r\n            end,\r\n            length: distance(start, end),\r\n        };\r\n    }\r\n\r\n    private static computeBestImageSize(imageSize: ISize, nbLines: number, orientation: ELinesOrientation): ISize {\r\n        if (orientation === ELinesOrientation.HORIZONTAL) {\r\n            return {\r\n                width: imageSize.width,\r\n                height: nbLines,\r\n            };\r\n        } else if (orientation === ELinesOrientation.VERTICAL) {\r\n            return {\r\n                width: nbLines,\r\n                height: imageSize.height,\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n        };\r\n    }\r\n\r\n    private static computeMaximumLinesNeeded(imageSize: ISize, linesSpacing: number): number {\r\n        const diagonal = Math.sqrt(imageSize.width * imageSize.width + imageSize.height * imageSize.height)\r\n        return Math.ceil(diagonal / linesSpacing);\r\n    }\r\n}\r\n\r\nexport { LinesStraightLines }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Helpers from \"./helpers\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction plot(image: InputImage, plotter: PlotterBase): void {\r\n    const start = performance.now();\r\n\r\n    if (image == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    const displayInfos = Helpers.buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    const imageFitting = plotter.fitImage(image.sourceImageAspectRatio);\r\n\r\n    const baseLineSpacing = 1 / Parameters.linesCount;\r\n    const linesSpacing = baseLineSpacing * imageFitting.zoomFactor;\r\n\r\n    const lines = Helpers.chooseLines(imageFitting.sizeInPlotter, linesSpacing);\r\n    const pattern = Helpers.choosePattern(imageFitting, linesSpacing);\r\n\r\n    image.resize(lines.suggestedImageSize);\r\n\r\n    for (let iLine = 0; iLine < lines.nbLines; iLine++) {\r\n        pattern.drawLine(lines, iLine, image, plotter);\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${performance.now() - start} ms.`);\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\nconst canvasPlotter = new PlotterCanvas2D();\r\n\r\nfunction plotOnCanvas(): void {\r\n    plot(inputImage, canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nParameters.addDownloadObserver(() => {\r\n    const svgPlotter = new PlotterSVG();\r\n    plot(inputImage, svgPlotter);\r\n    const svgString = svgPlotter.export();\r\n    const filename = \"image-as-sines.svg\";\r\n    Helpers.downloadTextFile(svgString, filename);\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    LINES_TYPE: \"lines-type-tabs-id\",\r\n    LINES_COUNT: \"lines-count-range-id\",\r\n    ORIENTATION: \"orientation-range-id\",\r\n    LINES_SIDES: \"lines-sides-range-id\",\r\n    LINES_AMPLITUDE: \"lines-amplitude-range-id\",\r\n    LINES_FREQUENCY: \"lines-frequency-range-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    WAVE_SQUARENESS: \"wave-squareness-range-id\",\r\n    LINE_THICKNESS: \"line-thickness-range-id\",\r\n    ROUND_LINECAP: \"round-linecap-checkbox-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    TRUE_INTENSITY: \"true-intensity-checkbox-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\nenum ELinesType {\r\n    STRAIGHT = \"0\",\r\n    SPIRAL = \"1\",\r\n    POLYGON = \"2\",\r\n    SINES = \"3\",\r\n}\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_COUNT, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ORIENTATION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_SIDES, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINES_FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.WAVE_SQUARENESS, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_THICKNESS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ROUND_LINECAP, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.TRUE_INTENSITY, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nfunction udpateLinesControlsVisibility(): void {\r\n    const type = Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    Page.Controls.setVisibility(controlId.LINES_SIDES, type === ELinesType.POLYGON);\r\n    Page.Controls.setVisibility(controlId.LINES_AMPLITUDE, type === ELinesType.SINES);\r\n    Page.Controls.setVisibility(controlId.LINES_FREQUENCY, type === ELinesType.SINES);\r\n}\r\nPage.Tabs.addObserver(controlId.LINES_TYPE, udpateLinesControlsVisibility);\r\nudpateLinesControlsVisibility();\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get linesType(): ELinesType {\r\n        return Page.Tabs.getValues(controlId.LINES_TYPE)[0] as ELinesType;\r\n    }\r\n\r\n    public static get linesCount(): number {\r\n        return Page.Range.getValue(controlId.LINES_COUNT);\r\n    }\r\n\r\n    public static get orientationInDegrees(): number {\r\n        return Page.Range.getValue(controlId.ORIENTATION);\r\n    }\r\n    public static get orientationInRadians(): number {\r\n        return this.orientationInDegrees / 180 * Math.PI;\r\n    }\r\n\r\n    public static get linesSides(): number {\r\n        return Page.Range.getValue(controlId.LINES_SIDES);\r\n    }\r\n\r\n    public static get linesAmplitude(): number {\r\n        return Page.Range.getValue(controlId.LINES_AMPLITUDE);\r\n    }\r\n\r\n    public static get linesFrequency(): number {\r\n        return Page.Range.getValue(controlId.LINES_FREQUENCY);\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get waveSquareness(): number {\r\n        return Page.Range.getValue(controlId.WAVE_SQUARENESS);\r\n    }\r\n\r\n    public static get lineThickness(): number {\r\n        return Page.Range.getValue(controlId.LINE_THICKNESS);\r\n    }\r\n\r\n    public static get roundLinecap(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ROUND_LINECAP);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get trueIntensity(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TRUE_INTENSITY);\r\n    }\r\n\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, ELinesType }\r\n","import { InputImage } from \"../input-image\";\r\nimport { LinesBase } from \"../lines/lines-base\";\r\nimport { PlotterBase } from \"../plotter/plotter-base\";\r\n\r\nabstract class PatternBase {\r\n    public abstract drawLine(lines: LinesBase, lineId: number, image: InputImage, plotter: PlotterBase): void;\r\n}\r\n\r\nexport { PatternBase };\r\n","import { InputImage } from \"../input-image\";\r\nimport { IPoint } from \"../interfaces/i-point\";\r\nimport { LinesBase } from \"../lines/lines-base\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { PlotterBase, IImageFitting } from \"../plotter/plotter-base\";\r\nimport { PatternBase } from \"./pattern-base\";\r\n\r\ntype WaveFunction = (phase: number, amplitude: number) => number;\r\ntype NormalRotationFunction = (normal: IPoint) => IPoint;\r\ntype SamplingFunction = (inputImage: InputImage, coords: IPoint) => number;\r\n\r\nclass PatternWave extends PatternBase {\r\n    private readonly waveFunction: WaveFunction;\r\n    private readonly normalRotationFunction: NormalRotationFunction;\r\n    private readonly samplingFunction: SamplingFunction;\r\n\r\n    private readonly imageFitting: IImageFitting;\r\n\r\n    private readonly maxAmplitude: number;\r\n    private readonly maxFrequency: number;\r\n    private readonly step: number;\r\n\r\n    public constructor(imageFitting: IImageFitting, linesSpacing: number) {\r\n        super();\r\n\r\n        this.waveFunction = PatternWave.computeWaveFunction();\r\n        this.normalRotationFunction = PatternWave.computeNormalRotationFunction();\r\n        this.samplingFunction = PatternWave.chooseBestSamplingFunction();\r\n\r\n        this.imageFitting = imageFitting;\r\n\r\n        const baseMaxFrequency = 500 * Parameters.maxFrequency;\r\n        this.maxFrequency = baseMaxFrequency / imageFitting.zoomFactor;\r\n\r\n        this.maxAmplitude = 0.5 * (linesSpacing - Parameters.lineThickness) * Parameters.maxAmplitude;\r\n\r\n        const samplesPerPixel = Math.max(1, 2 * this.maxFrequency);\r\n        this.step = 1 / samplesPerPixel;\r\n    }\r\n\r\n    public drawLine(lines: LinesBase, lineId: number, image: InputImage, plotter: PlotterBase): void {\r\n        let phase = 0;\r\n\r\n        lines.walkOnLine(lineId, this.step, (point: IPoint, normal: IPoint) => {\r\n            const normalizedCoords = this.imageFitting.pixelToRelative(point);\r\n\r\n            const outOfImage = normalizedCoords.x < 0 || normalizedCoords.x > 1 || normalizedCoords.y < 0 || normalizedCoords.y > 1;\r\n            if (outOfImage) {\r\n                if (plotter.hasStartedALine) {\r\n                    plotter.endLine();\r\n                }\r\n            } else {\r\n                const localDarkness = this.samplingFunction(image, normalizedCoords);\r\n\r\n                const localAmplitude = localDarkness * this.maxAmplitude;\r\n                const localHeight = this.waveFunction(phase, localAmplitude);\r\n\r\n                const rotatedNormal = this.normalRotationFunction(normal);\r\n                const dX = localHeight * rotatedNormal.x;\r\n                const dY = localHeight * rotatedNormal.y;\r\n\r\n                const absolutePoint = this.imageFitting.relativeToAbsolute(point);\r\n                if (!plotter.hasStartedALine) {\r\n                    plotter.startLine();\r\n                }\r\n                plotter.addPointToLine(absolutePoint.x + dX, absolutePoint.y + dY);\r\n\r\n                const localFrequency = localDarkness * this.maxFrequency;\r\n                phase += localFrequency * this.step;\r\n            }\r\n        });\r\n\r\n        if (plotter.hasStartedALine) {\r\n            plotter.endLine();\r\n        }\r\n    }\r\n\r\n    private static computeNormalRotationFunction(): NormalRotationFunction {\r\n        const angle = Parameters.angle * 2 * Math.PI;\r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n        const lengthAdjustment = 1 / cosAngle; // to maintain the waves height no matter the angle\r\n        return (normal: IPoint): IPoint => {\r\n            return {\r\n                x: (cosAngle * normal.x - sinAngle * normal.y) * lengthAdjustment,\r\n                y: (sinAngle * normal.x + cosAngle * normal.y) * lengthAdjustment,\r\n            };\r\n        };\r\n    }\r\n\r\n    private static computeWaveFunction(): WaveFunction {\r\n        if (Parameters.waveSquareness < 0.005) {\r\n            return (phase: number, amplitude: number) => amplitude * Math.sin(phase);\r\n        }\r\n\r\n        const sharpness = 1 - 0.99 * Parameters.waveSquareness;\r\n        return (phase: number, amplitude: number) => {\r\n            const sinPhase = Math.sin(phase);\r\n            return amplitude * Math.sign(sinPhase) * Math.pow(Math.abs(sinPhase), sharpness);\r\n        };\r\n    }\r\n\r\n    private static chooseBestSamplingFunction(): SamplingFunction {\r\n        if (Parameters.trueIntensity) {\r\n            if (Parameters.invertColors) {\r\n                return (inputImage: InputImage, coords: IPoint) => Math.sqrt(inputImage.sample(coords));\r\n            } else {\r\n                return (inputImage: InputImage, coords: IPoint) => Math.sqrt(1.001 - inputImage.sample(coords));\r\n            }\r\n        } else {\r\n            if (Parameters.invertColors) {\r\n                return (inputImage: InputImage, coords: IPoint) => inputImage.sample(coords);\r\n            } else {\r\n                return (inputImage: InputImage, coords: IPoint) => 1 - inputImage.sample(coords);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport { PatternWave };\r\n","import { IPoint } from \"../interfaces/i-point\";\r\nimport { ISize } from \"../interfaces/i-size\";\r\n\r\ninterface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineThickness: number;\r\n    blur: number;\r\n}\r\n\r\ninterface IImageFitting {\r\n    sizeInPlotter: ISize,\r\n    relativeToAbsolute: (relativeCoords: IPoint) => IPoint;\r\n    pixelToRelative: (pixelCoords: IPoint) => IPoint;\r\n    zoomFactor: number,\r\n};\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public get hasStartedALine(): boolean {\r\n        return this._hasStartedALine;\r\n    }\r\n\r\n    public startLine(): void {\r\n        this._hasStartedALine = true;\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n        this._hasStartedALine = false;\r\n    }\r\n\r\n    public fitImage(imageAspectRatio: number): IImageFitting {\r\n        const plotterSize = this.size;\r\n        const displayAspectRatio = plotterSize.width / plotterSize.height;\r\n\r\n        const sizeInPlotter: ISize = {\r\n            width: plotterSize.width,\r\n            height: plotterSize.height,\r\n        };\r\n        if (imageAspectRatio > displayAspectRatio) {\r\n            sizeInPlotter.height = Math.floor(sizeInPlotter.height * displayAspectRatio / imageAspectRatio);\r\n        } else if (imageAspectRatio < displayAspectRatio) {\r\n            sizeInPlotter.width = Math.floor(sizeInPlotter.width * imageAspectRatio / displayAspectRatio);\r\n        }\r\n\r\n        const offSetX = 0.5 * (plotterSize.width - sizeInPlotter.width);\r\n        const offSetY = 0.5 * (plotterSize.height - sizeInPlotter.height);\r\n        const relativeToAbsolute = (relativeCoords: IPoint): IPoint => {\r\n            return {\r\n                x: relativeCoords.x + offSetX,\r\n                y: relativeCoords.y + offSetY,\r\n            };\r\n        };\r\n\r\n        const minSide = Math.min(sizeInPlotter.width, sizeInPlotter.height);\r\n        const baseMinSide = Math.min(imageAspectRatio, 1 / imageAspectRatio);\r\n\r\n        return {\r\n            sizeInPlotter,\r\n            relativeToAbsolute,\r\n            pixelToRelative: (pixelCoordinates: IPoint) => {\r\n                return {\r\n                    x: pixelCoordinates.x / (sizeInPlotter.width - 1),\r\n                    y: pixelCoordinates.y / (sizeInPlotter.height - 1),\r\n                }\r\n            },\r\n            zoomFactor: minSide / baseMinSide,\r\n        };\r\n    }\r\n\r\n    protected abstract get size(): ISize;\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n    private _hasStartedALine: boolean = false;\r\n}\r\n\r\nexport { PlotterBase, IImageFitting, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { Parameters } from \"../parameters\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.resizeCanvas();\r\n\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineThickness * this.cssPixel;\r\n        this.context.lineJoin = \"round\";\r\n        this.context.lineCap = Parameters.roundLinecap ? \"round\" : \"butt\";\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { Parameters } from \"../parameters\";\r\nimport { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${infos.backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${WIDTH}\" height=\"${HEIGHT}\"/>\\n`);\r\n        const linecap = Parameters.roundLinecap ? ` stroke-linecap=\"round\"` : ``;\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineThickness}\" stroke-linejoin=\"round\"${linecap}>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}