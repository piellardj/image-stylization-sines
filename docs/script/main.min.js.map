{"version":3,"sources":["webpack://image-stylization-sines/./src/ts/input-image.ts","webpack://image-stylization-sines/./src/ts/main.ts","webpack://image-stylization-sines/./src/ts/parameters.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-base.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-canvas-2d.ts","webpack://image-stylization-sines/./src/ts/plotter/plotter-svg.ts","webpack://image-stylization-sines/webpack/bootstrap","webpack://image-stylization-sines/webpack/startup"],"names":["image","this","hiddenCanvas","document","createElement","hiddenContext","getContext","sourceImage","_width","_height","width","height","resize","maxWidth","wantedWidth","Math","min","wantedHeight","console","log","drawImage","fullPixelsArray","getImageData","data","valueArray","Uint8ClampedArray","i","length","r","g","b","sample","x","y","floorX","floor","fractX","getPixel","InputImage","inputImage","plot","plotter","start","Date","now","computeDarkness","displayInfos","backgroundColor","Parameters","invertColors","lineColor","lineWidth","blur","initialize","size","verticalResolution","trueIntensity","sqrt","inputImageAspectRatio","sourceImageAspectRatio","maxSize","usedSize","aspectRatio","displayAspectRatio","usedDisplayWidth","usedDisplayHeight","computeBiggestFittingRectangle","startX","startY","scalingX","scalingY","inclinaisonAngle","PI","angle","cosAngle","cos","sinAngle","sin","maxFrequency","maxAmplitude","stepX","iY","startLine","baselineY","phase","iX","baseX","darkness","frequency","waveHeight","dY","dX","addPointToLine","endLine","finalize","canvasPlotter","PlotterCanvas2D","plotOnCanvas","updateBlur","addRedrawObserver","addBlurChangeObserver","svgPlotter","PlotterSVG","onImageLoad","Page","Canvas","showLoader","addDownloadObserver","fileName","fileType","svgString","export","blob","Blob","type","window","navigator","msSaveBlob","URL","createObjectURL","linkElement","download","href","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","addFileUploadObserver","defaultImage","Image","addEventListener","src","controlId","redrawObservers","triggerRedraw","observer","Range","addLazyObserver","Checkbox","addObserver","Observers","canvasResize","push","callback","FileControl","addUploadObserver","filesList","FileReader","onload","result","readAsDataURL","getValue","isChecked","ANGLE_THRESHOLD","startLineInternal","lastDrawnPoint","potentialNextPoint","newPoint","addFirstPointToLineInternal","PlotterBase","computeAngle","addPointToLineInternal","endLineInternal","p1","p2","p3","angle1","atan2","angle2","diffAngle","abs","canvas","getCanvas","context","alpha","cssPixel","devicePixelRatio","infos","resizeCanvas","fillStyle","strokeStyle","fillRect","value","filter","beginPath","rawX","rawY","moveTo","lineTo","stroke","closePath","actualWidth","clientWidth","actualHeight","clientHeight","hasBlur","stringParts","join","toFixed","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["class InputImage {\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    private readonly hiddenCanvas: HTMLCanvasElement;\r\n    private readonly hiddenContext: CanvasRenderingContext2D;\r\n    private readonly sourceImage: HTMLImageElement;\r\n    private valueArray: Uint8ClampedArray;\r\n\r\n    public constructor(image: HTMLImageElement) {\r\n        this.hiddenCanvas = document.createElement(\"canvas\");\r\n        this.hiddenContext = this.hiddenCanvas.getContext(\"2d\");\r\n        this.sourceImage = image;\r\n        this._width = 0;\r\n        this._height = 0;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    public get sourceImageAspectRatio(): number {\r\n        return this.sourceImage.width / this.sourceImage.height;\r\n    }\r\n\r\n    public resize(maxWidth: number, height: number): void {\r\n        // the canvas handles image downsizing, however upsizing is handled manually in the sample method.\r\n        const wantedWidth = Math.min(this.sourceImage.width, maxWidth);\r\n        const wantedHeight = height;\r\n\r\n        if (this._width !== wantedWidth || this._height !== wantedHeight) {\r\n            console.log(`Resize image from ${this._width}x${this._height} to ${wantedWidth}x${wantedHeight}.`);\r\n\r\n            this._width = wantedWidth;\r\n            this._height = wantedHeight;\r\n\r\n            this.hiddenCanvas.width = this.width;\r\n            this.hiddenCanvas.height = this.height;\r\n            this.hiddenContext.drawImage(this.sourceImage, 0, 0, this.width, this.height);\r\n\r\n            // retrieve all pixels at once because it is way faster that 1 by 1\r\n            const fullPixelsArray = this.hiddenContext.getImageData(0, 0, this.width, this.height).data;\r\n            this.valueArray = new Uint8ClampedArray(this.width * this.height);\r\n\r\n            for (let i = 0; i < this.valueArray.length; i++) {\r\n                const r = fullPixelsArray[4 * i];\r\n                const g = fullPixelsArray[4 * i + 1];\r\n                const b = fullPixelsArray[4 * i + 2];\r\n                this.valueArray[i] = (r + g + b) / 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Returns a value in [0, 1].\r\n     * Performs linear interpolation on the x component.\r\n     * @param x can be decimal, interpolation will be performed.\r\n     * @param y must be an integer\r\n     */\r\n    public sample(x: number, y: number): number {\r\n        const floorX = Math.floor(x);\r\n        const fractX = x - floorX;\r\n\r\n        const before = this.getPixel(floorX, y);\r\n        const after = this.getPixel(floorX + 1, y);\r\n        const interpolated = before * (1 - fractX) + after * fractX;\r\n\r\n        return interpolated / 255;\r\n    }\r\n\r\n    /** Returns a value in [0, 255].\r\n     * No interpolation.\r\n     * @param x must be an integer\r\n     * @param y must be an integer\r\n     */\r\n    private getPixel(x: number, y: number): number {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n            return 0;\r\n        }\r\n\r\n        return this.valueArray[y * this.width + x];\r\n    }\r\n}\r\n\r\nexport { InputImage }\r\n","import { Parameters } from \"./parameters\";\r\nimport { InputImage } from \"./input-image\";\r\nimport { PlotterBase, IPlotterInfo, ISize } from \"./plotter/plotter-base\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction buildPlotterInfos(): IPlotterInfo {\r\n    return {\r\n        backgroundColor: Parameters.invertColors ? \"black\" : \"white\",\r\n        lineColor: Parameters.invertColors ? \"white\" : \"black\",\r\n        lineWidth: Parameters.lineWidth,\r\n        blur: Parameters.blur,\r\n    };\r\n}\r\n\r\nfunction computeBiggestFittingRectangle(maxSize: ISize, aspectRatio: number): ISize {\r\n    const displayAspectRatio = maxSize.width / maxSize.height;\r\n\r\n    let usedDisplayWidth = maxSize.width;\r\n    let usedDisplayHeight = maxSize.height;\r\n    if (aspectRatio > displayAspectRatio) {\r\n        usedDisplayHeight *= displayAspectRatio / aspectRatio;\r\n    } else if (aspectRatio < displayAspectRatio) {\r\n        usedDisplayWidth *= aspectRatio / displayAspectRatio;\r\n    }\r\n\r\n    return {\r\n        width: Math.floor(usedDisplayWidth),\r\n        height: Math.floor(usedDisplayHeight),\r\n    };\r\n}\r\n\r\nlet inputImage: InputImage = null;\r\n\r\nfunction plot(plotter: PlotterBase): void {\r\n    const start = Date.now();\r\n\r\n    if (inputImage == null) {\r\n        console.log(\"Image not loaded!\");\r\n        return;\r\n    }\r\n\r\n    const displayInfos = buildPlotterInfos();\r\n    plotter.initialize(displayInfos);\r\n\r\n    inputImage.resize(plotter.size.width, Parameters.verticalResolution);\r\n\r\n    let computeDarkness: (x: number, y: number) => number;\r\n    if (Parameters.trueIntensity) {\r\n        if (Parameters.invertColors) {\r\n            computeDarkness = (x: number, y: number) => Math.sqrt(inputImage.sample(x, y));\r\n        } else {\r\n            computeDarkness = (x: number, y: number) => Math.sqrt(1.001 - inputImage.sample(x, y));\r\n        }\r\n    } else {\r\n        if (Parameters.invertColors) {\r\n            computeDarkness = (x: number, y: number) => inputImage.sample(x, y);\r\n        } else {\r\n            computeDarkness = (x: number, y: number) => 1 - inputImage.sample(x, y);\r\n        }\r\n    }\r\n\r\n    // preserve aspect ratio no matter the size of the canvas\r\n    const inputImageAspectRatio = inputImage.sourceImageAspectRatio;\r\n    const maxSize = plotter.size;\r\n    const usedSize = computeBiggestFittingRectangle(plotter.size, inputImageAspectRatio);\r\n\r\n    const startX = 0.5 * (maxSize.width - usedSize.width);\r\n    const startY = 0.5 * (maxSize.height - usedSize.height);\r\n\r\n    const scalingX = usedSize.width / inputImage.width;\r\n    const scalingY = usedSize.height / inputImage.height;\r\n\r\n    const inclinaisonAngle = 2 * Math.PI * Parameters.angle;\r\n    const cosAngle = Math.cos(inclinaisonAngle);\r\n    const sinAngle = Math.sin(inclinaisonAngle);\r\n\r\n    const maxFrequency = 500 * Parameters.maxFrequency / inputImage.width;\r\n    const maxAmplitude = 0.5 * scalingY * Parameters.maxAmplitude / cosAngle;\r\n\r\n    const stepX = 1 / (2 * maxFrequency);\r\n    for (let iY = 0; iY < inputImage.height; iY++) {\r\n        plotter.startLine();\r\n\r\n        const baselineY = startY + (iY + 0.5) * scalingY;\r\n        let phase = 0;\r\n        for (let iX = 0; iX < inputImage.width - 1; iX += stepX) {\r\n            const baseX = startX + (iX + 0.5) * scalingX;\r\n\r\n            const darkness = computeDarkness(iX, iY);\r\n\r\n            const frequency = darkness * maxFrequency;\r\n            const amplitude = darkness * maxAmplitude;\r\n            const waveHeight = amplitude * Math.sin(phase);\r\n\r\n            const dY = waveHeight * cosAngle;\r\n            const dX = -waveHeight * sinAngle;\r\n\r\n            plotter.addPointToLine(baseX + dX, baselineY + dY);\r\n            phase += frequency * stepX;\r\n        }\r\n\r\n        plotter.endLine();\r\n    }\r\n\r\n    plotter.finalize();\r\n    console.log(`Plotting took ${Date.now() - start} ms.`);\r\n}\r\n\r\nconst canvasPlotter = new PlotterCanvas2D();\r\nfunction plotOnCanvas(): void {\r\n    plot(canvasPlotter);\r\n}\r\nParameters.addRedrawObserver(plotOnCanvas);\r\n\r\nfunction updateBlur(blur: number): void {\r\n    canvasPlotter.blur = blur;\r\n}\r\nParameters.addBlurChangeObserver(updateBlur);\r\nupdateBlur(Parameters.blur);\r\n\r\nconst svgPlotter = new PlotterSVG();\r\nParameters.addDownloadObserver(() => {\r\n    plot(svgPlotter);\r\n\r\n    const fileName = \"image-as-sines.svg\";\r\n    const fileType = \"text/plain\";\r\n    const svgString = svgPlotter.export();\r\n\r\n    const blob = new Blob([svgString], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n});\r\n\r\nfunction onImageLoad(image: HTMLImageElement): void {\r\n    inputImage = new InputImage(image);\r\n    Page.Canvas.showLoader(false);\r\n    plotOnCanvas();\r\n}\r\nParameters.addFileUploadObserver(onImageLoad);\r\n\r\nPage.Canvas.showLoader(true);\r\nconst defaultImage = new Image();\r\ndefaultImage.addEventListener(\"load\", () => {\r\n    onImageLoad(defaultImage);\r\n});\r\ndefaultImage.src = \"./resources/cat.jpg\";\r\n","import \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    UPLOAD_INPUT_IMAGE: \"input-image-upload-button\",\r\n    VERTICAL_RESOLUTION: \"vertical-resolution-range-id\",\r\n    AMPLITUDE: \"max-amplitude-range-id\",\r\n    FREQUENCY: \"max-frequency-range-id\",\r\n    ANGLE: \"angle-range-id\",\r\n    LINE_WIDTH: \"line-width-range-id\",\r\n    INVERT_COLORS: \"invert-colors-checkbox-id\",\r\n    BLUR: \"blur-range-id\",\r\n    TRUE_INTENSITY: \"true-intensity-checkbox-id\",\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nPage.Range.addLazyObserver(controlId.VERTICAL_RESOLUTION, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.AMPLITUDE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.FREQUENCY, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.ANGLE, triggerRedraw);\r\nPage.Range.addLazyObserver(controlId.LINE_WIDTH, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INVERT_COLORS, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.TRUE_INTENSITY, triggerRedraw);\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\n\r\nabstract class Parameters {\r\n    public static addFileUploadObserver(callback: (image: HTMLImageElement) => unknown): void {\r\n        Page.FileControl.addUploadObserver(controlId.UPLOAD_INPUT_IMAGE, (filesList: FileList) => {\r\n            if (filesList.length === 1) {\r\n                Page.Canvas.showLoader(true);\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    const image = new Image();\r\n                    image.addEventListener(\"load\", () => {\r\n                        callback(image);\r\n                    })\r\n                    image.src = reader.result as string;\r\n                };\r\n                reader.readAsDataURL(filesList[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static get verticalResolution(): number {\r\n        return Page.Range.getValue(controlId.VERTICAL_RESOLUTION);\r\n    }\r\n\r\n    public static get maxAmplitude(): number {\r\n        return Page.Range.getValue(controlId.AMPLITUDE);\r\n    }\r\n\r\n    public static get maxFrequency(): number {\r\n        return Page.Range.getValue(controlId.FREQUENCY);\r\n    }\r\n\r\n    public static get angle(): number {\r\n        return Page.Range.getValue(controlId.ANGLE);\r\n    }\r\n\r\n    public static get lineWidth(): number {\r\n        return Page.Range.getValue(controlId.LINE_WIDTH);\r\n    }\r\n\r\n    public static get invertColors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INVERT_COLORS);\r\n    }\r\n\r\n    public static get trueIntensity(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.TRUE_INTENSITY);\r\n    }\r\n\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR);\r\n    }\r\n    public static addBlurChangeObserver(callback: (newBlur: number) => unknown): void {\r\n        Page.Range.addObserver(controlId.BLUR, callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters }\r\n","interface IPlotterInfo {\r\n    backgroundColor: string;\r\n    lineColor: string;\r\n    lineWidth: number;\r\n    blur: number;\r\n}\r\n\r\ninterface ISize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst ANGLE_THRESHOLD = Math.PI * 0.01;\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract initialize(infos: IPlotterInfo): void;\r\n    public abstract finalize(): void;\r\n\r\n    public startLine(): void {\r\n        this.startLineInternal();\r\n\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n    }\r\n\r\n    public addPointToLine(x: number, y: number): void {\r\n        const newPoint: IPoint = { x, y };\r\n\r\n        if (this.lastDrawnPoint === null) {\r\n            this.lastDrawnPoint = newPoint;\r\n            this.addFirstPointToLineInternal(this.lastDrawnPoint.x, this.lastDrawnPoint.y);\r\n        } else if (this.potentialNextPoint === null) {\r\n            this.potentialNextPoint = newPoint;\r\n        } else {\r\n            const angle = PlotterBase.computeAngle(this.lastDrawnPoint, this.potentialNextPoint, newPoint);\r\n\r\n            if (angle > ANGLE_THRESHOLD) {\r\n                this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y); // this point cannot be skipped because it defines a significant angle\r\n                this.lastDrawnPoint = this.potentialNextPoint;\r\n            }\r\n            this.potentialNextPoint = newPoint;\r\n        }\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.potentialNextPoint !== null) {\r\n            this.addPointToLineInternal(this.potentialNextPoint.x, this.potentialNextPoint.y);\r\n        }\r\n        this.lastDrawnPoint = null;\r\n        this.potentialNextPoint = null;\r\n\r\n        this.endLineInternal();\r\n    }\r\n\r\n    protected abstract startLineInternal(): void;\r\n    protected abstract addFirstPointToLineInternal(x: number, y: number): void;\r\n    protected abstract addPointToLineInternal(x: number, y: number): void;\r\n    protected abstract endLineInternal(): void;\r\n\r\n    /** Smallest absolute angle difference between vectors p2-p1 and p3-p2 */\r\n    private static computeAngle(p1: IPoint, p2: IPoint, p3: IPoint): number {\r\n        const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x); // in [-PI,PI] (warped)\r\n        const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x); // in [-PI,PI] (warped)\r\n\r\n        const diffAngle = Math.abs(angle1 - angle2); // in [0, 2 * PI] (warped)\r\n        return Math.min(diffAngle, 2 * Math.PI - diffAngle);\r\n    }\r\n\r\n    private lastDrawnPoint: IPoint;\r\n    private potentialNextPoint: IPoint;\r\n}\r\n\r\nexport { PlotterBase, IPlotterInfo, ISize }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass PlotterCanvas2D extends PlotterBase {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: Math.floor(this.canvas.width / this.cssPixel),\r\n            height: Math.floor(this.canvas.height / this.cssPixel),\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.resizeCanvas();\r\n\r\n        this.context.fillStyle = infos.backgroundColor;\r\n        this.context.strokeStyle = infos.lineColor;\r\n        this.context.lineWidth = infos.lineWidth * this.cssPixel;\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public set blur(value: number) {\r\n        if (value === 0) {\r\n            this.canvas.style.filter = \"\";\r\n        } else {\r\n            this.canvas.style.filter = `blur(${value}px)`;\r\n        }\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.moveTo(x, y);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX * this.cssPixel;\r\n        const y = rawY * this.cssPixel;\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    protected endLineInternal(): void {\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D }\r\n","import { PlotterBase, IPlotterInfo, ISize } from \"./plotter-base\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private hasBlur: boolean;\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n        };\r\n    }\r\n\r\n    public initialize(infos: IPlotterInfo): void {\r\n        this.hasBlur = infos.blur > 0;\r\n\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${WIDTH} ${HEIGHT}\">\\n`);\r\n\r\n        if (this.hasBlur) {\r\n            const blurEffectId = \"gaussianBlur\";\r\n\r\n            this.stringParts.push(`\\t<defs>\\n`);\r\n            this.stringParts.push(`\\t\\t<filter id=\"${blurEffectId}\" x=\"0\" y=\"0\">\\n`);\r\n            this.stringParts.push(`\\t\\t\\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"${infos.blur}\"/>\\n`);\r\n            this.stringParts.push(`\\t\\t</filter>\\n`);\r\n            this.stringParts.push(`\\t</defs>\\n`);\r\n            this.stringParts.push(`\\t<g filter=\"url(#${blurEffectId})\">\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t<path fill=\"${infos.backgroundColor}\" stroke=\"none\" d=\"M0,0H${WIDTH}V${HEIGHT}H0Z\"/>\\n`);\r\n        this.stringParts.push(`\\t<g fill=\"none\" stroke=\"${infos.lineColor}\" stroke-width=\"${infos.lineWidth}\" stroke-linejoin=\"round\">\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        if (this.hasBlur) {\r\n            this.stringParts.push(`\\t\\t</g>\\n`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public endLineInternal(): void {\r\n        this.stringParts.push(`\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const start = Date.now();\r\n        const result = this.stringParts.join(\"\");\r\n        console.log(`Concatenation took ${Date.now() - start} ms.`);\r\n        return result;\r\n    }\r\n\r\n    protected startLineInternal(): void {\r\n        this.stringParts.push(`\\t\\t<path d=\"`);\r\n    }\r\n\r\n    protected addFirstPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`M${x},${y}L`);\r\n    }\r\n\r\n    protected addPointToLineInternal(rawX: number, rawY: number): void {\r\n        const x = rawX.toFixed(1);\r\n        const y = rawY.toFixed(1);\r\n        this.stringParts.push(`${x},${y} `);\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n__webpack_require__(633);\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}